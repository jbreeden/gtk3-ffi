# Generated by ffi_gen. Please do not change this file by hand.

require 'ffi'

module Cairo
  extend FFI::Library
  ffi_lib 'libcairo-2.dll'
  
  def self.attach_function(name, *_)
    begin; super; rescue FFI::NotFoundError => e
      (class << self; self; end).class_eval { define_method(name) { |*_| raise e } }
    end
  end
  
  CAIRO_HAS_FC_FONT = 1
  
  CAIRO_HAS_FT_FONT = 1
  
  CAIRO_HAS_GOBJECT_FUNCTIONS = 1
  
  CAIRO_HAS_IMAGE_SURFACE = 1
  
  CAIRO_HAS_PDF_SURFACE = 1
  
  CAIRO_HAS_PNG_FUNCTIONS = 1
  
  CAIRO_HAS_PS_SURFACE = 1
  
  CAIRO_HAS_RECORDING_SURFACE = 1
  
  CAIRO_HAS_SVG_SURFACE = 1
  
  CAIRO_HAS_USER_FONT = 1
  
  CAIRO_HAS_WIN32_FONT = 1
  
  CAIRO_HAS_WIN32_SURFACE = 1
  
  CAIRO_VERSION_MAJOR = 1
  
  CAIRO_VERSION_MINOR = 10
  
  CAIRO_VERSION_MICRO = 2
  
  CAIRO_MIME_TYPE_JPEG = "image/jpeg"
  
  CAIRO_MIME_TYPE_PNG = "image/png"
  
  CAIRO_MIME_TYPE_JP2 = "image/jp2"
  
  CAIRO_MIME_TYPE_URI = "text/x-uri"
  
  # (Not documented)
  # 
  # @method cairo_version()
  # @return [Integer] 
  # @scope class
  attach_function :cairo_version, :cairo_version, [], :int
  
  # (Not documented)
  # 
  # @method cairo_version_string()
  # @return [String] 
  # @scope class
  attach_function :cairo_version_string, :cairo_version_string, [], :string
  
  # (Not documented)
  module CairoWrappers
    # @return [Cairo] 
    def reference()
      Cairo.new Cairo.cairo_reference(self)
    end
    
    # @return [nil] 
    def destroy()
      Cairo.cairo_destroy(self)
    end
    
    # @return [Integer] 
    def get_reference_count()
      Cairo.cairo_get_reference_count(self)
    end
    
    # @param [FFI::Pointer(*CairoUserDataKey)] key 
    # @return [FFI::Pointer(*Void)] 
    def get_user_data(key)
      Cairo.cairo_get_user_data(self, key)
    end
    
    # @param [FFI::Pointer(*CairoUserDataKey)] key 
    # @param [FFI::Pointer(*Void)] user_data 
    # @param [FFI::Pointer(CairoDestroyFuncT)] destroy 
    # @return [Symbol from _enum_cairo_status_] 
    def set_user_data(key, user_data, destroy)
      Cairo.cairo_set_user_data(self, key, user_data, destroy)
    end
    
    # @return [nil] 
    def save()
      Cairo.cairo_save(self)
    end
    
    # @return [nil] 
    def restore()
      Cairo.cairo_restore(self)
    end
    
    # @return [nil] 
    def push_group()
      Cairo.cairo_push_group(self)
    end
    
    # @param [Symbol from _enum_cairo_content_] content 
    # @return [nil] 
    def push_group_with_content(content)
      Cairo.cairo_push_group_with_content(self, content)
    end
    
    # @return [CairoPattern] 
    def pop_group()
      CairoPattern.new Cairo.cairo_pop_group(self)
    end
    
    # @return [nil] 
    def pop_group_to_source()
      Cairo.cairo_pop_group_to_source(self)
    end
    
    # @param [Symbol from _enum_cairo_operator_] op 
    # @return [nil] 
    def set_operator(op)
      Cairo.cairo_set_operator(self, op)
    end
    
    # @param [FFI::Pointer(*CairoPattern)] source 
    # @return [nil] 
    def set_source(source)
      Cairo.cairo_set_source(self, source)
    end
    
    # @param [Float] red 
    # @param [Float] green 
    # @param [Float] blue 
    # @return [nil] 
    def set_source_rgb(red, green, blue)
      Cairo.cairo_set_source_rgb(self, red, green, blue)
    end
    
    # @param [Float] red 
    # @param [Float] green 
    # @param [Float] blue 
    # @param [Float] alpha 
    # @return [nil] 
    def set_source_rgba(red, green, blue, alpha)
      Cairo.cairo_set_source_rgba(self, red, green, blue, alpha)
    end
    
    # @param [FFI::Pointer(*CairoSurface)] surface 
    # @param [Float] x 
    # @param [Float] y 
    # @return [nil] 
    def set_source_surface(surface, x, y)
      Cairo.cairo_set_source_surface(self, surface, x, y)
    end
    
    # @param [Float] tolerance 
    # @return [nil] 
    def set_tolerance(tolerance)
      Cairo.cairo_set_tolerance(self, tolerance)
    end
    
    # @param [Symbol from _enum_cairo_antialias_] antialias 
    # @return [nil] 
    def set_antialias(antialias)
      Cairo.cairo_set_antialias(self, antialias)
    end
    
    # @param [Symbol from _enum_cairo_fill_rule_] fill_rule 
    # @return [nil] 
    def set_fill_rule(fill_rule)
      Cairo.cairo_set_fill_rule(self, fill_rule)
    end
    
    # @param [Float] width 
    # @return [nil] 
    def set_line_width(width)
      Cairo.cairo_set_line_width(self, width)
    end
    
    # @param [Symbol from _enum_cairo_line_cap_] line_cap 
    # @return [nil] 
    def set_line_cap(line_cap)
      Cairo.cairo_set_line_cap(self, line_cap)
    end
    
    # @param [Symbol from _enum_cairo_line_join_] line_join 
    # @return [nil] 
    def set_line_join(line_join)
      Cairo.cairo_set_line_join(self, line_join)
    end
    
    # @param [FFI::Pointer(*Double)] dashes 
    # @param [Integer] num_dashes 
    # @param [Float] offset 
    # @return [nil] 
    def set_dash(dashes, num_dashes, offset)
      Cairo.cairo_set_dash(self, dashes, num_dashes, offset)
    end
    
    # @param [Float] limit 
    # @return [nil] 
    def set_miter_limit(limit)
      Cairo.cairo_set_miter_limit(self, limit)
    end
    
    # @param [Float] tx 
    # @param [Float] ty 
    # @return [nil] 
    def translate(tx, ty)
      Cairo.cairo_translate(self, tx, ty)
    end
    
    # @param [Float] sx 
    # @param [Float] sy 
    # @return [nil] 
    def scale(sx, sy)
      Cairo.cairo_scale(self, sx, sy)
    end
    
    # @param [Float] angle 
    # @return [nil] 
    def rotate(angle)
      Cairo.cairo_rotate(self, angle)
    end
    
    # @param [FFI::Pointer(*CairoMatrix)] matrix 
    # @return [nil] 
    def transform(matrix)
      Cairo.cairo_transform(self, matrix)
    end
    
    # @param [FFI::Pointer(*CairoMatrix)] matrix 
    # @return [nil] 
    def set_matrix(matrix)
      Cairo.cairo_set_matrix(self, matrix)
    end
    
    # @return [nil] 
    def identity_matrix()
      Cairo.cairo_identity_matrix(self)
    end
    
    # @param [FFI::Pointer(*Double)] x 
    # @param [FFI::Pointer(*Double)] y 
    # @return [nil] 
    def user_to_device(x, y)
      Cairo.cairo_user_to_device(self, x, y)
    end
    
    # @param [FFI::Pointer(*Double)] dx 
    # @param [FFI::Pointer(*Double)] dy 
    # @return [nil] 
    def user_to_device_distance(dx, dy)
      Cairo.cairo_user_to_device_distance(self, dx, dy)
    end
    
    # @param [FFI::Pointer(*Double)] x 
    # @param [FFI::Pointer(*Double)] y 
    # @return [nil] 
    def device_to_user(x, y)
      Cairo.cairo_device_to_user(self, x, y)
    end
    
    # @param [FFI::Pointer(*Double)] dx 
    # @param [FFI::Pointer(*Double)] dy 
    # @return [nil] 
    def device_to_user_distance(dx, dy)
      Cairo.cairo_device_to_user_distance(self, dx, dy)
    end
    
    # @return [nil] 
    def new_path()
      Cairo.cairo_new_path(self)
    end
    
    # @param [Float] x 
    # @param [Float] y 
    # @return [nil] 
    def move_to(x, y)
      Cairo.cairo_move_to(self, x, y)
    end
    
    # @return [nil] 
    def new_sub_path()
      Cairo.cairo_new_sub_path(self)
    end
    
    # @param [Float] x 
    # @param [Float] y 
    # @return [nil] 
    def line_to(x, y)
      Cairo.cairo_line_to(self, x, y)
    end
    
    # @param [Float] x1 
    # @param [Float] y1 
    # @param [Float] x2 
    # @param [Float] y2 
    # @param [Float] x3 
    # @param [Float] y3 
    # @return [nil] 
    def curve_to(x1, y1, x2, y2, x3, y3)
      Cairo.cairo_curve_to(self, x1, y1, x2, y2, x3, y3)
    end
    
    # @param [Float] xc 
    # @param [Float] yc 
    # @param [Float] radius 
    # @param [Float] angle1 
    # @param [Float] angle2 
    # @return [nil] 
    def arc(xc, yc, radius, angle1, angle2)
      Cairo.cairo_arc(self, xc, yc, radius, angle1, angle2)
    end
    
    # @param [Float] xc 
    # @param [Float] yc 
    # @param [Float] radius 
    # @param [Float] angle1 
    # @param [Float] angle2 
    # @return [nil] 
    def arc_negative(xc, yc, radius, angle1, angle2)
      Cairo.cairo_arc_negative(self, xc, yc, radius, angle1, angle2)
    end
    
    # @param [Float] dx 
    # @param [Float] dy 
    # @return [nil] 
    def rel_move_to(dx, dy)
      Cairo.cairo_rel_move_to(self, dx, dy)
    end
    
    # @param [Float] dx 
    # @param [Float] dy 
    # @return [nil] 
    def rel_line_to(dx, dy)
      Cairo.cairo_rel_line_to(self, dx, dy)
    end
    
    # @param [Float] dx1 
    # @param [Float] dy1 
    # @param [Float] dx2 
    # @param [Float] dy2 
    # @param [Float] dx3 
    # @param [Float] dy3 
    # @return [nil] 
    def rel_curve_to(dx1, dy1, dx2, dy2, dx3, dy3)
      Cairo.cairo_rel_curve_to(self, dx1, dy1, dx2, dy2, dx3, dy3)
    end
    
    # @param [Float] x 
    # @param [Float] y 
    # @param [Float] width 
    # @param [Float] height 
    # @return [nil] 
    def rectangle(x, y, width, height)
      Cairo.cairo_rectangle(self, x, y, width, height)
    end
    
    # @return [nil] 
    def close_path()
      Cairo.cairo_close_path(self)
    end
    
    # @param [FFI::Pointer(*Double)] x1 
    # @param [FFI::Pointer(*Double)] y1 
    # @param [FFI::Pointer(*Double)] x2 
    # @param [FFI::Pointer(*Double)] y2 
    # @return [nil] 
    def path_extents(x1, y1, x2, y2)
      Cairo.cairo_path_extents(self, x1, y1, x2, y2)
    end
    
    # @return [nil] 
    def paint()
      Cairo.cairo_paint(self)
    end
    
    # @param [Float] alpha 
    # @return [nil] 
    def paint_with_alpha(alpha)
      Cairo.cairo_paint_with_alpha(self, alpha)
    end
    
    # @param [FFI::Pointer(*CairoPattern)] pattern 
    # @return [nil] 
    def mask(pattern)
      Cairo.cairo_mask(self, pattern)
    end
    
    # @param [FFI::Pointer(*CairoSurface)] surface 
    # @param [Float] surface_x 
    # @param [Float] surface_y 
    # @return [nil] 
    def mask_surface(surface, surface_x, surface_y)
      Cairo.cairo_mask_surface(self, surface, surface_x, surface_y)
    end
    
    # @return [nil] 
    def stroke()
      Cairo.cairo_stroke(self)
    end
    
    # @return [nil] 
    def stroke_preserve()
      Cairo.cairo_stroke_preserve(self)
    end
    
    # @return [nil] 
    def fill()
      Cairo.cairo_fill(self)
    end
    
    # @return [nil] 
    def fill_preserve()
      Cairo.cairo_fill_preserve(self)
    end
    
    # @return [nil] 
    def copy_page()
      Cairo.cairo_copy_page(self)
    end
    
    # @return [nil] 
    def show_page()
      Cairo.cairo_show_page(self)
    end
    
    # @param [Float] x 
    # @param [Float] y 
    # @return [Integer] 
    def in_stroke(x, y)
      Cairo.cairo_in_stroke(self, x, y)
    end
    
    # @param [Float] x 
    # @param [Float] y 
    # @return [Integer] 
    def in_fill(x, y)
      Cairo.cairo_in_fill(self, x, y)
    end
    
    # @param [Float] x 
    # @param [Float] y 
    # @return [Integer] 
    def in_clip(x, y)
      Cairo.cairo_in_clip(self, x, y)
    end
    
    # @param [FFI::Pointer(*Double)] x1 
    # @param [FFI::Pointer(*Double)] y1 
    # @param [FFI::Pointer(*Double)] x2 
    # @param [FFI::Pointer(*Double)] y2 
    # @return [nil] 
    def stroke_extents(x1, y1, x2, y2)
      Cairo.cairo_stroke_extents(self, x1, y1, x2, y2)
    end
    
    # @param [FFI::Pointer(*Double)] x1 
    # @param [FFI::Pointer(*Double)] y1 
    # @param [FFI::Pointer(*Double)] x2 
    # @param [FFI::Pointer(*Double)] y2 
    # @return [nil] 
    def fill_extents(x1, y1, x2, y2)
      Cairo.cairo_fill_extents(self, x1, y1, x2, y2)
    end
    
    # @return [nil] 
    def reset_clip()
      Cairo.cairo_reset_clip(self)
    end
    
    # @return [nil] 
    def clip()
      Cairo.cairo_clip(self)
    end
    
    # @return [nil] 
    def clip_preserve()
      Cairo.cairo_clip_preserve(self)
    end
    
    # @param [FFI::Pointer(*Double)] x1 
    # @param [FFI::Pointer(*Double)] y1 
    # @param [FFI::Pointer(*Double)] x2 
    # @param [FFI::Pointer(*Double)] y2 
    # @return [nil] 
    def clip_extents(x1, y1, x2, y2)
      Cairo.cairo_clip_extents(self, x1, y1, x2, y2)
    end
    
    # @return [CairoRectangleList] 
    def copy_clip_rectangle_list()
      CairoRectangleList.new Cairo.cairo_copy_clip_rectangle_list(self)
    end
    
    # @param [String] family 
    # @param [Symbol from _enum_cairo_font_slant_] slant 
    # @param [Symbol from _enum_cairo_font_weight_] weight 
    # @return [nil] 
    def select_font_face(family, slant, weight)
      Cairo.cairo_select_font_face(self, family, slant, weight)
    end
    
    # @param [Float] size 
    # @return [nil] 
    def set_font_size(size)
      Cairo.cairo_set_font_size(self, size)
    end
    
    # @param [FFI::Pointer(*CairoMatrix)] matrix 
    # @return [nil] 
    def set_font_matrix(matrix)
      Cairo.cairo_set_font_matrix(self, matrix)
    end
    
    # @param [FFI::Pointer(*CairoMatrix)] matrix 
    # @return [nil] 
    def get_font_matrix(matrix)
      Cairo.cairo_get_font_matrix(self, matrix)
    end
    
    # @param [FFI::Pointer(*CairoFontOptions)] options 
    # @return [nil] 
    def set_font_options(options)
      Cairo.cairo_set_font_options(self, options)
    end
    
    # @param [FFI::Pointer(*CairoFontOptions)] options 
    # @return [nil] 
    def get_font_options(options)
      Cairo.cairo_get_font_options(self, options)
    end
    
    # @param [FFI::Pointer(*CairoFontFace)] font_face 
    # @return [nil] 
    def set_font_face(font_face)
      Cairo.cairo_set_font_face(self, font_face)
    end
    
    # @return [CairoFontFace] 
    def get_font_face()
      CairoFontFace.new Cairo.cairo_get_font_face(self)
    end
    
    # @param [FFI::Pointer(*CairoScaledFont)] scaled_font 
    # @return [nil] 
    def set_scaled_font(scaled_font)
      Cairo.cairo_set_scaled_font(self, scaled_font)
    end
    
    # @return [CairoScaledFont] 
    def get_scaled_font()
      CairoScaledFont.new Cairo.cairo_get_scaled_font(self)
    end
    
    # @param [String] utf8 
    # @return [nil] 
    def show_text(utf8)
      Cairo.cairo_show_text(self, utf8)
    end
    
    # @param [FFI::Pointer(*CairoGlyphT)] glyphs 
    # @param [Integer] num_glyphs 
    # @return [nil] 
    def show_glyphs(glyphs, num_glyphs)
      Cairo.cairo_show_glyphs(self, glyphs, num_glyphs)
    end
    
    # @param [String] utf8 
    # @param [Integer] utf8_len 
    # @param [FFI::Pointer(*CairoGlyphT)] glyphs 
    # @param [Integer] num_glyphs 
    # @param [FFI::Pointer(*CairoTextClusterT)] clusters 
    # @param [Integer] num_clusters 
    # @param [Symbol from _enum_cairo_text_cluster_flags_] cluster_flags 
    # @return [nil] 
    def show_text_glyphs(utf8, utf8_len, glyphs, num_glyphs, clusters, num_clusters, cluster_flags)
      Cairo.cairo_show_text_glyphs(self, utf8, utf8_len, glyphs, num_glyphs, clusters, num_clusters, cluster_flags)
    end
    
    # @param [String] utf8 
    # @return [nil] 
    def text_path(utf8)
      Cairo.cairo_text_path(self, utf8)
    end
    
    # @param [FFI::Pointer(*CairoGlyphT)] glyphs 
    # @param [Integer] num_glyphs 
    # @return [nil] 
    def glyph_path(glyphs, num_glyphs)
      Cairo.cairo_glyph_path(self, glyphs, num_glyphs)
    end
    
    # @param [String] utf8 
    # @param [FFI::Pointer(*CairoTextExtentsT)] extents 
    # @return [nil] 
    def text_extents(utf8, extents)
      Cairo.cairo_text_extents(self, utf8, extents)
    end
    
    # @param [FFI::Pointer(*CairoGlyphT)] glyphs 
    # @param [Integer] num_glyphs 
    # @param [FFI::Pointer(*CairoTextExtentsT)] extents 
    # @return [nil] 
    def glyph_extents(glyphs, num_glyphs, extents)
      Cairo.cairo_glyph_extents(self, glyphs, num_glyphs, extents)
    end
    
    # @param [FFI::Pointer(*CairoFontExtentsT)] extents 
    # @return [nil] 
    def font_extents(extents)
      Cairo.cairo_font_extents(self, extents)
    end
    
    # @return [Symbol from _enum_cairo_operator_] 
    def get_operator()
      Cairo.cairo_get_operator(self)
    end
    
    # @return [CairoPattern] 
    def get_source()
      CairoPattern.new Cairo.cairo_get_source(self)
    end
    
    # @return [Float] 
    def get_tolerance()
      Cairo.cairo_get_tolerance(self)
    end
    
    # @return [Symbol from _enum_cairo_antialias_] 
    def get_antialias()
      Cairo.cairo_get_antialias(self)
    end
    
    # @return [Integer] 
    def has_current_point()
      Cairo.cairo_has_current_point(self)
    end
    
    # @param [FFI::Pointer(*Double)] x 
    # @param [FFI::Pointer(*Double)] y 
    # @return [nil] 
    def get_current_point(x, y)
      Cairo.cairo_get_current_point(self, x, y)
    end
    
    # @return [Symbol from _enum_cairo_fill_rule_] 
    def get_fill_rule()
      Cairo.cairo_get_fill_rule(self)
    end
    
    # @return [Float] 
    def get_line_width()
      Cairo.cairo_get_line_width(self)
    end
    
    # @return [Symbol from _enum_cairo_line_cap_] 
    def get_line_cap()
      Cairo.cairo_get_line_cap(self)
    end
    
    # @return [Symbol from _enum_cairo_line_join_] 
    def get_line_join()
      Cairo.cairo_get_line_join(self)
    end
    
    # @return [Float] 
    def get_miter_limit()
      Cairo.cairo_get_miter_limit(self)
    end
    
    # @return [Integer] 
    def get_dash_count()
      Cairo.cairo_get_dash_count(self)
    end
    
    # @param [FFI::Pointer(*Double)] dashes 
    # @param [FFI::Pointer(*Double)] offset 
    # @return [nil] 
    def get_dash(dashes, offset)
      Cairo.cairo_get_dash(self, dashes, offset)
    end
    
    # @param [FFI::Pointer(*CairoMatrix)] matrix 
    # @return [nil] 
    def get_matrix(matrix)
      Cairo.cairo_get_matrix(self, matrix)
    end
    
    # @return [CairoSurface] 
    def get_target()
      CairoSurface.new Cairo.cairo_get_target(self)
    end
    
    # @return [CairoSurface] 
    def get_group_target()
      CairoSurface.new Cairo.cairo_get_group_target(self)
    end
    
    # @return [CairoPath] 
    def copy_path()
      CairoPath.new Cairo.cairo_copy_path(self)
    end
    
    # @return [CairoPath] 
    def copy_path_flat()
      CairoPath.new Cairo.cairo_copy_path_flat(self)
    end
    
    # @param [FFI::Pointer(*CairoPath)] path 
    # @return [nil] 
    def append_path(path)
      Cairo.cairo_append_path(self, path)
    end
    
    # @return [Symbol from _enum_cairo_status_] 
    def status()
      Cairo.cairo_status(self)
    end
  end
  
  class Cairo < FFI::Struct
    include CairoWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  module CairoSurfaceWrappers
    # @param [Symbol from _enum_cairo_content_] content 
    # @param [Integer] width 
    # @param [Integer] height 
    # @return [CairoSurface] 
    def create_similar(content, width, height)
      CairoSurface.new Cairo.cairo_surface_create_similar(self, content, width, height)
    end
    
    # @param [Float] x 
    # @param [Float] y 
    # @param [Float] width 
    # @param [Float] height 
    # @return [CairoSurface] 
    def create_for_rectangle(x, y, width, height)
      CairoSurface.new Cairo.cairo_surface_create_for_rectangle(self, x, y, width, height)
    end
    
    # @return [CairoSurface] 
    def reference()
      CairoSurface.new Cairo.cairo_surface_reference(self)
    end
    
    # @return [nil] 
    def finish()
      Cairo.cairo_surface_finish(self)
    end
    
    # @return [nil] 
    def destroy()
      Cairo.cairo_surface_destroy(self)
    end
    
    # @return [CairoDevice] 
    def get_device()
      CairoDevice.new Cairo.cairo_surface_get_device(self)
    end
    
    # @return [Integer] 
    def get_reference_count()
      Cairo.cairo_surface_get_reference_count(self)
    end
    
    # @return [Symbol from _enum_cairo_status_] 
    def status()
      Cairo.cairo_surface_status(self)
    end
    
    # @return [Symbol from _enum_cairo_surface_type_] 
    def get_type()
      Cairo.cairo_surface_get_type(self)
    end
    
    # @return [Symbol from _enum_cairo_content_] 
    def get_content()
      Cairo.cairo_surface_get_content(self)
    end
    
    # @param [String] filename 
    # @return [Symbol from _enum_cairo_status_] 
    def write_to_png(filename)
      Cairo.cairo_surface_write_to_png(self, filename)
    end
    
    # @param [Proc(_callback_cairo_write_func_t_)] write_func 
    # @param [FFI::Pointer(*Void)] closure 
    # @return [Symbol from _enum_cairo_status_] 
    def write_to_png_stream(write_func, closure)
      Cairo.cairo_surface_write_to_png_stream(self, write_func, closure)
    end
    
    # @param [FFI::Pointer(*CairoUserDataKey)] key 
    # @return [FFI::Pointer(*Void)] 
    def get_user_data(key)
      Cairo.cairo_surface_get_user_data(self, key)
    end
    
    # @param [FFI::Pointer(*CairoUserDataKey)] key 
    # @param [FFI::Pointer(*Void)] user_data 
    # @param [FFI::Pointer(CairoDestroyFuncT)] destroy 
    # @return [Symbol from _enum_cairo_status_] 
    def set_user_data(key, user_data, destroy)
      Cairo.cairo_surface_set_user_data(self, key, user_data, destroy)
    end
    
    # @param [String] mime_type 
    # @param [FFI::Pointer(**UChar)] data 
    # @param [FFI::Pointer(*ULong)] length 
    # @return [nil] 
    def get_mime_data(mime_type, data, length)
      Cairo.cairo_surface_get_mime_data(self, mime_type, data, length)
    end
    
    # @param [String] mime_type 
    # @param [FFI::Pointer(*UChar)] data 
    # @param [Integer] length 
    # @param [FFI::Pointer(CairoDestroyFuncT)] destroy 
    # @param [FFI::Pointer(*Void)] closure 
    # @return [Symbol from _enum_cairo_status_] 
    def set_mime_data(mime_type, data, length, destroy, closure)
      Cairo.cairo_surface_set_mime_data(self, mime_type, data, length, destroy, closure)
    end
    
    # @param [FFI::Pointer(*CairoFontOptions)] options 
    # @return [nil] 
    def get_font_options(options)
      Cairo.cairo_surface_get_font_options(self, options)
    end
    
    # @return [nil] 
    def flush()
      Cairo.cairo_surface_flush(self)
    end
    
    # @return [nil] 
    def mark_dirty()
      Cairo.cairo_surface_mark_dirty(self)
    end
    
    # @param [Integer] x 
    # @param [Integer] y 
    # @param [Integer] width 
    # @param [Integer] height 
    # @return [nil] 
    def mark_dirty_rectangle(x, y, width, height)
      Cairo.cairo_surface_mark_dirty_rectangle(self, x, y, width, height)
    end
    
    # @param [Float] x_offset 
    # @param [Float] y_offset 
    # @return [nil] 
    def set_device_offset(x_offset, y_offset)
      Cairo.cairo_surface_set_device_offset(self, x_offset, y_offset)
    end
    
    # @param [FFI::Pointer(*Double)] x_offset 
    # @param [FFI::Pointer(*Double)] y_offset 
    # @return [nil] 
    def get_device_offset(x_offset, y_offset)
      Cairo.cairo_surface_get_device_offset(self, x_offset, y_offset)
    end
    
    # @param [Float] x_pixels_per_inch 
    # @param [Float] y_pixels_per_inch 
    # @return [nil] 
    def set_fallback_resolution(x_pixels_per_inch, y_pixels_per_inch)
      Cairo.cairo_surface_set_fallback_resolution(self, x_pixels_per_inch, y_pixels_per_inch)
    end
    
    # @param [FFI::Pointer(*Double)] x_pixels_per_inch 
    # @param [FFI::Pointer(*Double)] y_pixels_per_inch 
    # @return [nil] 
    def get_fallback_resolution(x_pixels_per_inch, y_pixels_per_inch)
      Cairo.cairo_surface_get_fallback_resolution(self, x_pixels_per_inch, y_pixels_per_inch)
    end
    
    # @return [nil] 
    def copy_page()
      Cairo.cairo_surface_copy_page(self)
    end
    
    # @return [nil] 
    def show_page()
      Cairo.cairo_surface_show_page(self)
    end
    
    # @return [Integer] 
    def has_show_text_glyphs()
      Cairo.cairo_surface_has_show_text_glyphs(self)
    end
  end
  
  class CairoSurface < FFI::Struct
    include CairoSurfaceWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  module CairoDeviceWrappers
    # @return [CairoDevice] 
    def reference()
      CairoDevice.new Cairo.cairo_device_reference(self)
    end
    
    # @return [Symbol from _enum_cairo_device_type_] 
    def get_type()
      Cairo.cairo_device_get_type(self)
    end
    
    # @return [Symbol from _enum_cairo_status_] 
    def status()
      Cairo.cairo_device_status(self)
    end
    
    # @return [Symbol from _enum_cairo_status_] 
    def acquire()
      Cairo.cairo_device_acquire(self)
    end
    
    # @return [nil] 
    def release()
      Cairo.cairo_device_release(self)
    end
    
    # @return [nil] 
    def flush()
      Cairo.cairo_device_flush(self)
    end
    
    # @return [nil] 
    def finish()
      Cairo.cairo_device_finish(self)
    end
    
    # @return [nil] 
    def destroy()
      Cairo.cairo_device_destroy(self)
    end
    
    # @return [Integer] 
    def get_reference_count()
      Cairo.cairo_device_get_reference_count(self)
    end
    
    # @param [FFI::Pointer(*CairoUserDataKey)] key 
    # @return [FFI::Pointer(*Void)] 
    def get_user_data(key)
      Cairo.cairo_device_get_user_data(self, key)
    end
    
    # @param [FFI::Pointer(*CairoUserDataKey)] key 
    # @param [FFI::Pointer(*Void)] user_data 
    # @param [FFI::Pointer(CairoDestroyFuncT)] destroy 
    # @return [Symbol from _enum_cairo_status_] 
    def set_user_data(key, user_data, destroy)
      Cairo.cairo_device_set_user_data(self, key, user_data, destroy)
    end
  end
  
  class CairoDevice < FFI::Struct
    include CairoDeviceWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :xx ::
  #   (Float) 
  # :yx ::
  #   (Float) 
  # :xy ::
  #   (Float) 
  # :yy ::
  #   (Float) 
  # :x0 ::
  #   (Float) 
  # :y0 ::
  #   (Float) 
  module CairoMatrixWrappers
    # @param [Float] xx 
    # @param [Float] yx 
    # @param [Float] xy 
    # @param [Float] yy 
    # @param [Float] x0 
    # @param [Float] y0 
    # @return [nil] 
    def init(xx, yx, xy, yy, x0, y0)
      Cairo.cairo_matrix_init(self, xx, yx, xy, yy, x0, y0)
    end
    
    # @return [nil] 
    def init_identity()
      Cairo.cairo_matrix_init_identity(self)
    end
    
    # @param [Float] tx 
    # @param [Float] ty 
    # @return [nil] 
    def init_translate(tx, ty)
      Cairo.cairo_matrix_init_translate(self, tx, ty)
    end
    
    # @param [Float] sx 
    # @param [Float] sy 
    # @return [nil] 
    def init_scale(sx, sy)
      Cairo.cairo_matrix_init_scale(self, sx, sy)
    end
    
    # @param [Float] radians 
    # @return [nil] 
    def init_rotate(radians)
      Cairo.cairo_matrix_init_rotate(self, radians)
    end
    
    # @param [Float] tx 
    # @param [Float] ty 
    # @return [nil] 
    def translate(tx, ty)
      Cairo.cairo_matrix_translate(self, tx, ty)
    end
    
    # @param [Float] sx 
    # @param [Float] sy 
    # @return [nil] 
    def scale(sx, sy)
      Cairo.cairo_matrix_scale(self, sx, sy)
    end
    
    # @param [Float] radians 
    # @return [nil] 
    def rotate(radians)
      Cairo.cairo_matrix_rotate(self, radians)
    end
    
    # @return [Symbol from _enum_cairo_status_] 
    def invert()
      Cairo.cairo_matrix_invert(self)
    end
    
    # @param [FFI::Pointer(*CairoMatrix)] a 
    # @param [FFI::Pointer(*CairoMatrix)] b 
    # @return [nil] 
    def multiply(a, b)
      Cairo.cairo_matrix_multiply(self, a, b)
    end
    
    # @param [FFI::Pointer(*Double)] dx 
    # @param [FFI::Pointer(*Double)] dy 
    # @return [nil] 
    def transform_distance(dx, dy)
      Cairo.cairo_matrix_transform_distance(self, dx, dy)
    end
    
    # @param [FFI::Pointer(*Double)] x 
    # @param [FFI::Pointer(*Double)] y 
    # @return [nil] 
    def transform_point(x, y)
      Cairo.cairo_matrix_transform_point(self, x, y)
    end
  end
  
  class CairoMatrix < FFI::Struct
    include CairoMatrixWrappers
    layout :xx, :double,
           :yx, :double,
           :xy, :double,
           :yy, :double,
           :x0, :double,
           :y0, :double
  end
  
  # (Not documented)
  module CairoPatternWrappers
    # @return [CairoPattern] 
    def reference()
      CairoPattern.new Cairo.cairo_pattern_reference(self)
    end
    
    # @return [nil] 
    def destroy()
      Cairo.cairo_pattern_destroy(self)
    end
    
    # @return [Integer] 
    def get_reference_count()
      Cairo.cairo_pattern_get_reference_count(self)
    end
    
    # @return [Symbol from _enum_cairo_status_] 
    def status()
      Cairo.cairo_pattern_status(self)
    end
    
    # @param [FFI::Pointer(*CairoUserDataKey)] key 
    # @return [FFI::Pointer(*Void)] 
    def get_user_data(key)
      Cairo.cairo_pattern_get_user_data(self, key)
    end
    
    # @param [FFI::Pointer(*CairoUserDataKey)] key 
    # @param [FFI::Pointer(*Void)] user_data 
    # @param [FFI::Pointer(CairoDestroyFuncT)] destroy 
    # @return [Symbol from _enum_cairo_status_] 
    def set_user_data(key, user_data, destroy)
      Cairo.cairo_pattern_set_user_data(self, key, user_data, destroy)
    end
    
    # @return [Symbol from _enum_cairo_pattern_type_] 
    def get_type()
      Cairo.cairo_pattern_get_type(self)
    end
    
    # @param [Float] offset 
    # @param [Float] red 
    # @param [Float] green 
    # @param [Float] blue 
    # @return [nil] 
    def add_color_stop_rgb(offset, red, green, blue)
      Cairo.cairo_pattern_add_color_stop_rgb(self, offset, red, green, blue)
    end
    
    # @param [Float] offset 
    # @param [Float] red 
    # @param [Float] green 
    # @param [Float] blue 
    # @param [Float] alpha 
    # @return [nil] 
    def add_color_stop_rgba(offset, red, green, blue, alpha)
      Cairo.cairo_pattern_add_color_stop_rgba(self, offset, red, green, blue, alpha)
    end
    
    # @param [CairoMatrix] matrix 
    # @return [nil] 
    def set_matrix(matrix)
      Cairo.cairo_pattern_set_matrix(self, matrix)
    end
    
    # @param [CairoMatrix] matrix 
    # @return [nil] 
    def get_matrix(matrix)
      Cairo.cairo_pattern_get_matrix(self, matrix)
    end
    
    # @param [Symbol from _enum_cairo_extend_] extend 
    # @return [nil] 
    def set_extend(extend)
      Cairo.cairo_pattern_set_extend(self, extend)
    end
    
    # @return [Symbol from _enum_cairo_extend_] 
    def get_extend()
      Cairo.cairo_pattern_get_extend(self)
    end
    
    # @param [Symbol from _enum_cairo_filter_] filter 
    # @return [nil] 
    def set_filter(filter)
      Cairo.cairo_pattern_set_filter(self, filter)
    end
    
    # @return [Symbol from _enum_cairo_filter_] 
    def get_filter()
      Cairo.cairo_pattern_get_filter(self)
    end
    
    # @param [FFI::Pointer(*Double)] red 
    # @param [FFI::Pointer(*Double)] green 
    # @param [FFI::Pointer(*Double)] blue 
    # @param [FFI::Pointer(*Double)] alpha 
    # @return [Symbol from _enum_cairo_status_] 
    def get_rgba(red, green, blue, alpha)
      Cairo.cairo_pattern_get_rgba(self, red, green, blue, alpha)
    end
    
    # @param [FFI::Pointer(**CairoSurfaceT)] surface 
    # @return [Symbol from _enum_cairo_status_] 
    def get_surface(surface)
      Cairo.cairo_pattern_get_surface(self, surface)
    end
    
    # @param [Integer] index 
    # @param [FFI::Pointer(*Double)] offset 
    # @param [FFI::Pointer(*Double)] red 
    # @param [FFI::Pointer(*Double)] green 
    # @param [FFI::Pointer(*Double)] blue 
    # @param [FFI::Pointer(*Double)] alpha 
    # @return [Symbol from _enum_cairo_status_] 
    def get_color_stop_rgba(index, offset, red, green, blue, alpha)
      Cairo.cairo_pattern_get_color_stop_rgba(self, index, offset, red, green, blue, alpha)
    end
    
    # @param [FFI::Pointer(*Int)] count 
    # @return [Symbol from _enum_cairo_status_] 
    def get_color_stop_count(count)
      Cairo.cairo_pattern_get_color_stop_count(self, count)
    end
    
    # @param [FFI::Pointer(*Double)] x0 
    # @param [FFI::Pointer(*Double)] y0 
    # @param [FFI::Pointer(*Double)] x1 
    # @param [FFI::Pointer(*Double)] y1 
    # @return [Symbol from _enum_cairo_status_] 
    def get_linear_points(x0, y0, x1, y1)
      Cairo.cairo_pattern_get_linear_points(self, x0, y0, x1, y1)
    end
    
    # @param [FFI::Pointer(*Double)] x0 
    # @param [FFI::Pointer(*Double)] y0 
    # @param [FFI::Pointer(*Double)] r0 
    # @param [FFI::Pointer(*Double)] x1 
    # @param [FFI::Pointer(*Double)] y1 
    # @param [FFI::Pointer(*Double)] r1 
    # @return [Symbol from _enum_cairo_status_] 
    def get_radial_circles(x0, y0, r0, x1, y1, r1)
      Cairo.cairo_pattern_get_radial_circles(self, x0, y0, r0, x1, y1, r1)
    end
  end
  
  class CairoPattern < FFI::Struct
    include CairoPatternWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :unused ::
  #   (Integer) 
  class CairoUserDataKey < FFI::Struct
    layout :unused, :int
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_status).</em>
  # 
  # === Options:
  # :success ::
  #   
  # :no_memory ::
  #   
  # :invalid_restore ::
  #   
  # :invalid_pop_group ::
  #   
  # :no_current_point ::
  #   
  # :invalid_matrix ::
  #   
  # :invalid_status ::
  #   
  # :null_pointer ::
  #   
  # :invalid_string ::
  #   
  # :invalid_path_data ::
  #   
  # :read_error ::
  #   
  # :write_error ::
  #   
  # :surface_finished ::
  #   
  # :surface_type_mismatch ::
  #   
  # :pattern_type_mismatch ::
  #   
  # :invalid_content ::
  #   
  # :invalid_format ::
  #   
  # :invalid_visual ::
  #   
  # :file_not_found ::
  #   
  # :invalid_dash ::
  #   
  # :invalid_dsc_comment ::
  #   
  # :invalid_index ::
  #   
  # :clip_not_representable ::
  #   
  # :temp_file_error ::
  #   
  # :invalid_stride ::
  #   
  # :font_type_mismatch ::
  #   
  # :user_font_immutable ::
  #   
  # :user_font_error ::
  #   
  # :negative_count ::
  #   
  # :invalid_clusters ::
  #   
  # :invalid_slant ::
  #   
  # :invalid_weight ::
  #   
  # :invalid_size ::
  #   
  # :user_font_not_implemented ::
  #   
  # :device_type_mismatch ::
  #   
  # :device_error ::
  #   
  # :last_status ::
  #   
  # 
  # @method _enum_cairo_status_
  # @return [Symbol]
  # @scope class
  enum :cairo_status, [
    :success, 0,
    :no_memory, 1,
    :invalid_restore, 2,
    :invalid_pop_group, 3,
    :no_current_point, 4,
    :invalid_matrix, 5,
    :invalid_status, 6,
    :null_pointer, 7,
    :invalid_string, 8,
    :invalid_path_data, 9,
    :read_error, 10,
    :write_error, 11,
    :surface_finished, 12,
    :surface_type_mismatch, 13,
    :pattern_type_mismatch, 14,
    :invalid_content, 15,
    :invalid_format, 16,
    :invalid_visual, 17,
    :file_not_found, 18,
    :invalid_dash, 19,
    :invalid_dsc_comment, 20,
    :invalid_index, 21,
    :clip_not_representable, 22,
    :temp_file_error, 23,
    :invalid_stride, 24,
    :font_type_mismatch, 25,
    :user_font_immutable, 26,
    :user_font_error, 27,
    :negative_count, 28,
    :invalid_clusters, 29,
    :invalid_slant, 30,
    :invalid_weight, 31,
    :invalid_size, 32,
    :user_font_not_implemented, 33,
    :device_type_mismatch, 34,
    :device_error, 35,
    :last_status, 36
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_content).</em>
  # 
  # === Options:
  # :color ::
  #   
  # :alpha ::
  #   
  # :color_alpha ::
  #   
  # 
  # @method _enum_cairo_content_
  # @return [Symbol]
  # @scope class
  enum :cairo_content, [
    :color, 4096,
    :alpha, 8192,
    :color_alpha, 12288
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_cairo_write_func_t_(cairo_status_t, closure, data, length)
  # @param [Symbol from _enum_cairo_status_] cairo_status_t 
  # @param [FFI::Pointer(*Void)] closure 
  # @param [FFI::Pointer(*UChar)] data 
  # @param [Integer] length 
  # @return [Symbol from _enum_cairo_status_] 
  # @scope class
  callback :cairo_write_func_t, [:cairo_status, :pointer, :pointer, :uint], :cairo_status
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_cairo_read_func_t_(cairo_status_t, closure, data, length)
  # @param [Symbol from _enum_cairo_status_] cairo_status_t 
  # @param [FFI::Pointer(*Void)] closure 
  # @param [FFI::Pointer(*UChar)] data 
  # @param [Integer] length 
  # @return [Symbol from _enum_cairo_status_] 
  # @scope class
  callback :cairo_read_func_t, [:cairo_status, :pointer, :pointer, :uint], :cairo_status
  
  # (Not documented)
  # 
  # @method cairo_create(target)
  # @param [CairoSurface] target 
  # @return [Cairo] 
  # @scope class
  attach_function :cairo_create, :cairo_create, [CairoSurface], Cairo
  
  # (Not documented)
  # 
  # @method cairo_reference(cr)
  # @param [Cairo] cr 
  # @return [Cairo] 
  # @scope class
  attach_function :cairo_reference, :cairo_reference, [Cairo], Cairo
  
  # (Not documented)
  # 
  # @method cairo_destroy(cr)
  # @param [Cairo] cr 
  # @return [nil] 
  # @scope class
  attach_function :cairo_destroy, :cairo_destroy, [Cairo], :void
  
  # (Not documented)
  # 
  # @method cairo_get_reference_count(cr)
  # @param [Cairo] cr 
  # @return [Integer] 
  # @scope class
  attach_function :cairo_get_reference_count, :cairo_get_reference_count, [Cairo], :uint
  
  # (Not documented)
  # 
  # @method cairo_get_user_data(cr, key)
  # @param [Cairo] cr 
  # @param [CairoUserDataKey] key 
  # @return [FFI::Pointer(*Void)] 
  # @scope class
  attach_function :cairo_get_user_data, :cairo_get_user_data, [Cairo, CairoUserDataKey], :pointer
  
  # (Not documented)
  # 
  # @method cairo_set_user_data(cr, key, user_data, destroy)
  # @param [Cairo] cr 
  # @param [CairoUserDataKey] key 
  # @param [FFI::Pointer(*Void)] user_data 
  # @param [FFI::Pointer(CairoDestroyFuncT)] destroy 
  # @return [Symbol from _enum_cairo_status_] 
  # @scope class
  attach_function :cairo_set_user_data, :cairo_set_user_data, [Cairo, CairoUserDataKey, :pointer, :pointer], :cairo_status
  
  # (Not documented)
  # 
  # @method cairo_save(cr)
  # @param [Cairo] cr 
  # @return [nil] 
  # @scope class
  attach_function :cairo_save, :cairo_save, [Cairo], :void
  
  # (Not documented)
  # 
  # @method cairo_restore(cr)
  # @param [Cairo] cr 
  # @return [nil] 
  # @scope class
  attach_function :cairo_restore, :cairo_restore, [Cairo], :void
  
  # (Not documented)
  # 
  # @method cairo_push_group(cr)
  # @param [Cairo] cr 
  # @return [nil] 
  # @scope class
  attach_function :cairo_push_group, :cairo_push_group, [Cairo], :void
  
  # (Not documented)
  # 
  # @method cairo_push_group_with_content(cr, content)
  # @param [Cairo] cr 
  # @param [Symbol from _enum_cairo_content_] content 
  # @return [nil] 
  # @scope class
  attach_function :cairo_push_group_with_content, :cairo_push_group_with_content, [Cairo, :cairo_content], :void
  
  # (Not documented)
  # 
  # @method cairo_pop_group(cr)
  # @param [Cairo] cr 
  # @return [CairoPattern] 
  # @scope class
  attach_function :cairo_pop_group, :cairo_pop_group, [Cairo], CairoPattern
  
  # (Not documented)
  # 
  # @method cairo_pop_group_to_source(cr)
  # @param [Cairo] cr 
  # @return [nil] 
  # @scope class
  attach_function :cairo_pop_group_to_source, :cairo_pop_group_to_source, [Cairo], :void
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_operator).</em>
  # 
  # === Options:
  # :clear ::
  #   
  # :source ::
  #   
  # :over ::
  #   
  # :in_ ::
  #   
  # :out ::
  #   
  # :atop ::
  #   
  # :dest ::
  #   
  # :dest_over ::
  #   
  # :dest_in ::
  #   
  # :dest_out ::
  #   
  # :dest_atop ::
  #   
  # :xor ::
  #   
  # :add ::
  #   
  # :saturate ::
  #   
  # :multiply ::
  #   
  # :screen ::
  #   
  # :overlay ::
  #   
  # :darken ::
  #   
  # :lighten ::
  #   
  # :color_dodge ::
  #   
  # :color_burn ::
  #   
  # :hard_light ::
  #   
  # :soft_light ::
  #   
  # :difference ::
  #   
  # :exclusion ::
  #   
  # :hsl_hue ::
  #   
  # :hsl_saturation ::
  #   
  # :hsl_color ::
  #   
  # :hsl_luminosity ::
  #   
  # 
  # @method _enum_cairo_operator_
  # @return [Symbol]
  # @scope class
  enum :cairo_operator, [
    :clear, 0,
    :source, 1,
    :over, 2,
    :in_, 3,
    :out, 4,
    :atop, 5,
    :dest, 6,
    :dest_over, 7,
    :dest_in, 8,
    :dest_out, 9,
    :dest_atop, 10,
    :xor, 11,
    :add, 12,
    :saturate, 13,
    :multiply, 14,
    :screen, 15,
    :overlay, 16,
    :darken, 17,
    :lighten, 18,
    :color_dodge, 19,
    :color_burn, 20,
    :hard_light, 21,
    :soft_light, 22,
    :difference, 23,
    :exclusion, 24,
    :hsl_hue, 25,
    :hsl_saturation, 26,
    :hsl_color, 27,
    :hsl_luminosity, 28
  ]
  
  # (Not documented)
  # 
  # @method cairo_set_operator(cr, op)
  # @param [Cairo] cr 
  # @param [Symbol from _enum_cairo_operator_] op 
  # @return [nil] 
  # @scope class
  attach_function :cairo_set_operator, :cairo_set_operator, [Cairo, :cairo_operator], :void
  
  # (Not documented)
  # 
  # @method cairo_set_source(cr, source)
  # @param [Cairo] cr 
  # @param [CairoPattern] source 
  # @return [nil] 
  # @scope class
  attach_function :cairo_set_source, :cairo_set_source, [Cairo, CairoPattern], :void
  
  # (Not documented)
  # 
  # @method cairo_set_source_rgb(cr, red, green, blue)
  # @param [Cairo] cr 
  # @param [Float] red 
  # @param [Float] green 
  # @param [Float] blue 
  # @return [nil] 
  # @scope class
  attach_function :cairo_set_source_rgb, :cairo_set_source_rgb, [Cairo, :double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_set_source_rgba(cr, red, green, blue, alpha)
  # @param [Cairo] cr 
  # @param [Float] red 
  # @param [Float] green 
  # @param [Float] blue 
  # @param [Float] alpha 
  # @return [nil] 
  # @scope class
  attach_function :cairo_set_source_rgba, :cairo_set_source_rgba, [Cairo, :double, :double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_set_source_surface(cr, surface, x, y)
  # @param [Cairo] cr 
  # @param [CairoSurface] surface 
  # @param [Float] x 
  # @param [Float] y 
  # @return [nil] 
  # @scope class
  attach_function :cairo_set_source_surface, :cairo_set_source_surface, [Cairo, CairoSurface, :double, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_set_tolerance(cr, tolerance)
  # @param [Cairo] cr 
  # @param [Float] tolerance 
  # @return [nil] 
  # @scope class
  attach_function :cairo_set_tolerance, :cairo_set_tolerance, [Cairo, :double], :void
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_antialias).</em>
  # 
  # === Options:
  # :default ::
  #   
  # :none ::
  #   
  # :gray ::
  #   
  # :subpixel ::
  #   
  # 
  # @method _enum_cairo_antialias_
  # @return [Symbol]
  # @scope class
  enum :cairo_antialias, [
    :default, 0,
    :none, 1,
    :gray, 2,
    :subpixel, 3
  ]
  
  # (Not documented)
  # 
  # @method cairo_set_antialias(cr, antialias)
  # @param [Cairo] cr 
  # @param [Symbol from _enum_cairo_antialias_] antialias 
  # @return [nil] 
  # @scope class
  attach_function :cairo_set_antialias, :cairo_set_antialias, [Cairo, :cairo_antialias], :void
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_fill_rule).</em>
  # 
  # === Options:
  # :winding ::
  #   
  # :even_odd ::
  #   
  # 
  # @method _enum_cairo_fill_rule_
  # @return [Symbol]
  # @scope class
  enum :cairo_fill_rule, [
    :winding, 0,
    :even_odd, 1
  ]
  
  # (Not documented)
  # 
  # @method cairo_set_fill_rule(cr, fill_rule)
  # @param [Cairo] cr 
  # @param [Symbol from _enum_cairo_fill_rule_] fill_rule 
  # @return [nil] 
  # @scope class
  attach_function :cairo_set_fill_rule, :cairo_set_fill_rule, [Cairo, :cairo_fill_rule], :void
  
  # (Not documented)
  # 
  # @method cairo_set_line_width(cr, width)
  # @param [Cairo] cr 
  # @param [Float] width 
  # @return [nil] 
  # @scope class
  attach_function :cairo_set_line_width, :cairo_set_line_width, [Cairo, :double], :void
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_line_cap).</em>
  # 
  # === Options:
  # :butt ::
  #   
  # :round ::
  #   
  # :square ::
  #   
  # 
  # @method _enum_cairo_line_cap_
  # @return [Symbol]
  # @scope class
  enum :cairo_line_cap, [
    :butt, 0,
    :round, 1,
    :square, 2
  ]
  
  # (Not documented)
  # 
  # @method cairo_set_line_cap(cr, line_cap)
  # @param [Cairo] cr 
  # @param [Symbol from _enum_cairo_line_cap_] line_cap 
  # @return [nil] 
  # @scope class
  attach_function :cairo_set_line_cap, :cairo_set_line_cap, [Cairo, :cairo_line_cap], :void
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_line_join).</em>
  # 
  # === Options:
  # :miter ::
  #   
  # :round ::
  #   
  # :bevel ::
  #   
  # 
  # @method _enum_cairo_line_join_
  # @return [Symbol]
  # @scope class
  enum :cairo_line_join, [
    :miter, 0,
    :round, 1,
    :bevel, 2
  ]
  
  # (Not documented)
  # 
  # @method cairo_set_line_join(cr, line_join)
  # @param [Cairo] cr 
  # @param [Symbol from _enum_cairo_line_join_] line_join 
  # @return [nil] 
  # @scope class
  attach_function :cairo_set_line_join, :cairo_set_line_join, [Cairo, :cairo_line_join], :void
  
  # (Not documented)
  # 
  # @method cairo_set_dash(cr, dashes, num_dashes, offset)
  # @param [Cairo] cr 
  # @param [FFI::Pointer(*Double)] dashes 
  # @param [Integer] num_dashes 
  # @param [Float] offset 
  # @return [nil] 
  # @scope class
  attach_function :cairo_set_dash, :cairo_set_dash, [Cairo, :pointer, :int, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_set_miter_limit(cr, limit)
  # @param [Cairo] cr 
  # @param [Float] limit 
  # @return [nil] 
  # @scope class
  attach_function :cairo_set_miter_limit, :cairo_set_miter_limit, [Cairo, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_translate(cr, tx, ty)
  # @param [Cairo] cr 
  # @param [Float] tx 
  # @param [Float] ty 
  # @return [nil] 
  # @scope class
  attach_function :cairo_translate, :cairo_translate, [Cairo, :double, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_scale(cr, sx, sy)
  # @param [Cairo] cr 
  # @param [Float] sx 
  # @param [Float] sy 
  # @return [nil] 
  # @scope class
  attach_function :cairo_scale, :cairo_scale, [Cairo, :double, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_rotate(cr, angle)
  # @param [Cairo] cr 
  # @param [Float] angle 
  # @return [nil] 
  # @scope class
  attach_function :cairo_rotate, :cairo_rotate, [Cairo, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_transform(cr, matrix)
  # @param [Cairo] cr 
  # @param [CairoMatrix] matrix 
  # @return [nil] 
  # @scope class
  attach_function :cairo_transform, :cairo_transform, [Cairo, CairoMatrix], :void
  
  # (Not documented)
  # 
  # @method cairo_set_matrix(cr, matrix)
  # @param [Cairo] cr 
  # @param [CairoMatrix] matrix 
  # @return [nil] 
  # @scope class
  attach_function :cairo_set_matrix, :cairo_set_matrix, [Cairo, CairoMatrix], :void
  
  # (Not documented)
  # 
  # @method cairo_identity_matrix(cr)
  # @param [Cairo] cr 
  # @return [nil] 
  # @scope class
  attach_function :cairo_identity_matrix, :cairo_identity_matrix, [Cairo], :void
  
  # (Not documented)
  # 
  # @method cairo_user_to_device(cr, x, y)
  # @param [Cairo] cr 
  # @param [FFI::Pointer(*Double)] x 
  # @param [FFI::Pointer(*Double)] y 
  # @return [nil] 
  # @scope class
  attach_function :cairo_user_to_device, :cairo_user_to_device, [Cairo, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method cairo_user_to_device_distance(cr, dx, dy)
  # @param [Cairo] cr 
  # @param [FFI::Pointer(*Double)] dx 
  # @param [FFI::Pointer(*Double)] dy 
  # @return [nil] 
  # @scope class
  attach_function :cairo_user_to_device_distance, :cairo_user_to_device_distance, [Cairo, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method cairo_device_to_user(cr, x, y)
  # @param [Cairo] cr 
  # @param [FFI::Pointer(*Double)] x 
  # @param [FFI::Pointer(*Double)] y 
  # @return [nil] 
  # @scope class
  attach_function :cairo_device_to_user, :cairo_device_to_user, [Cairo, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method cairo_device_to_user_distance(cr, dx, dy)
  # @param [Cairo] cr 
  # @param [FFI::Pointer(*Double)] dx 
  # @param [FFI::Pointer(*Double)] dy 
  # @return [nil] 
  # @scope class
  attach_function :cairo_device_to_user_distance, :cairo_device_to_user_distance, [Cairo, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method cairo_new_path(cr)
  # @param [Cairo] cr 
  # @return [nil] 
  # @scope class
  attach_function :cairo_new_path, :cairo_new_path, [Cairo], :void
  
  # (Not documented)
  # 
  # @method cairo_move_to(cr, x, y)
  # @param [Cairo] cr 
  # @param [Float] x 
  # @param [Float] y 
  # @return [nil] 
  # @scope class
  attach_function :cairo_move_to, :cairo_move_to, [Cairo, :double, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_new_sub_path(cr)
  # @param [Cairo] cr 
  # @return [nil] 
  # @scope class
  attach_function :cairo_new_sub_path, :cairo_new_sub_path, [Cairo], :void
  
  # (Not documented)
  # 
  # @method cairo_line_to(cr, x, y)
  # @param [Cairo] cr 
  # @param [Float] x 
  # @param [Float] y 
  # @return [nil] 
  # @scope class
  attach_function :cairo_line_to, :cairo_line_to, [Cairo, :double, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_curve_to(cr, x1, y1, x2, y2, x3, y3)
  # @param [Cairo] cr 
  # @param [Float] x1 
  # @param [Float] y1 
  # @param [Float] x2 
  # @param [Float] y2 
  # @param [Float] x3 
  # @param [Float] y3 
  # @return [nil] 
  # @scope class
  attach_function :cairo_curve_to, :cairo_curve_to, [Cairo, :double, :double, :double, :double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_arc(cr, xc, yc, radius, angle1, angle2)
  # @param [Cairo] cr 
  # @param [Float] xc 
  # @param [Float] yc 
  # @param [Float] radius 
  # @param [Float] angle1 
  # @param [Float] angle2 
  # @return [nil] 
  # @scope class
  attach_function :cairo_arc, :cairo_arc, [Cairo, :double, :double, :double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_arc_negative(cr, xc, yc, radius, angle1, angle2)
  # @param [Cairo] cr 
  # @param [Float] xc 
  # @param [Float] yc 
  # @param [Float] radius 
  # @param [Float] angle1 
  # @param [Float] angle2 
  # @return [nil] 
  # @scope class
  attach_function :cairo_arc_negative, :cairo_arc_negative, [Cairo, :double, :double, :double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_rel_move_to(cr, dx, dy)
  # @param [Cairo] cr 
  # @param [Float] dx 
  # @param [Float] dy 
  # @return [nil] 
  # @scope class
  attach_function :cairo_rel_move_to, :cairo_rel_move_to, [Cairo, :double, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_rel_line_to(cr, dx, dy)
  # @param [Cairo] cr 
  # @param [Float] dx 
  # @param [Float] dy 
  # @return [nil] 
  # @scope class
  attach_function :cairo_rel_line_to, :cairo_rel_line_to, [Cairo, :double, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_rel_curve_to(cr, dx1, dy1, dx2, dy2, dx3, dy3)
  # @param [Cairo] cr 
  # @param [Float] dx1 
  # @param [Float] dy1 
  # @param [Float] dx2 
  # @param [Float] dy2 
  # @param [Float] dx3 
  # @param [Float] dy3 
  # @return [nil] 
  # @scope class
  attach_function :cairo_rel_curve_to, :cairo_rel_curve_to, [Cairo, :double, :double, :double, :double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_rectangle(cr, x, y, width, height)
  # @param [Cairo] cr 
  # @param [Float] x 
  # @param [Float] y 
  # @param [Float] width 
  # @param [Float] height 
  # @return [nil] 
  # @scope class
  attach_function :cairo_rectangle, :cairo_rectangle, [Cairo, :double, :double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_close_path(cr)
  # @param [Cairo] cr 
  # @return [nil] 
  # @scope class
  attach_function :cairo_close_path, :cairo_close_path, [Cairo], :void
  
  # (Not documented)
  # 
  # @method cairo_path_extents(cr, x1, y1, x2, y2)
  # @param [Cairo] cr 
  # @param [FFI::Pointer(*Double)] x1 
  # @param [FFI::Pointer(*Double)] y1 
  # @param [FFI::Pointer(*Double)] x2 
  # @param [FFI::Pointer(*Double)] y2 
  # @return [nil] 
  # @scope class
  attach_function :cairo_path_extents, :cairo_path_extents, [Cairo, :pointer, :pointer, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method cairo_paint(cr)
  # @param [Cairo] cr 
  # @return [nil] 
  # @scope class
  attach_function :cairo_paint, :cairo_paint, [Cairo], :void
  
  # (Not documented)
  # 
  # @method cairo_paint_with_alpha(cr, alpha)
  # @param [Cairo] cr 
  # @param [Float] alpha 
  # @return [nil] 
  # @scope class
  attach_function :cairo_paint_with_alpha, :cairo_paint_with_alpha, [Cairo, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_mask(cr, pattern)
  # @param [Cairo] cr 
  # @param [CairoPattern] pattern 
  # @return [nil] 
  # @scope class
  attach_function :cairo_mask, :cairo_mask, [Cairo, CairoPattern], :void
  
  # (Not documented)
  # 
  # @method cairo_mask_surface(cr, surface, surface_x, surface_y)
  # @param [Cairo] cr 
  # @param [CairoSurface] surface 
  # @param [Float] surface_x 
  # @param [Float] surface_y 
  # @return [nil] 
  # @scope class
  attach_function :cairo_mask_surface, :cairo_mask_surface, [Cairo, CairoSurface, :double, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_stroke(cr)
  # @param [Cairo] cr 
  # @return [nil] 
  # @scope class
  attach_function :cairo_stroke, :cairo_stroke, [Cairo], :void
  
  # (Not documented)
  # 
  # @method cairo_stroke_preserve(cr)
  # @param [Cairo] cr 
  # @return [nil] 
  # @scope class
  attach_function :cairo_stroke_preserve, :cairo_stroke_preserve, [Cairo], :void
  
  # (Not documented)
  # 
  # @method cairo_fill(cr)
  # @param [Cairo] cr 
  # @return [nil] 
  # @scope class
  attach_function :cairo_fill, :cairo_fill, [Cairo], :void
  
  # (Not documented)
  # 
  # @method cairo_fill_preserve(cr)
  # @param [Cairo] cr 
  # @return [nil] 
  # @scope class
  attach_function :cairo_fill_preserve, :cairo_fill_preserve, [Cairo], :void
  
  # (Not documented)
  # 
  # @method cairo_copy_page(cr)
  # @param [Cairo] cr 
  # @return [nil] 
  # @scope class
  attach_function :cairo_copy_page, :cairo_copy_page, [Cairo], :void
  
  # (Not documented)
  # 
  # @method cairo_show_page(cr)
  # @param [Cairo] cr 
  # @return [nil] 
  # @scope class
  attach_function :cairo_show_page, :cairo_show_page, [Cairo], :void
  
  # (Not documented)
  # 
  # @method cairo_in_stroke(cr, x, y)
  # @param [Cairo] cr 
  # @param [Float] x 
  # @param [Float] y 
  # @return [Integer] 
  # @scope class
  attach_function :cairo_in_stroke, :cairo_in_stroke, [Cairo, :double, :double], :int
  
  # (Not documented)
  # 
  # @method cairo_in_fill(cr, x, y)
  # @param [Cairo] cr 
  # @param [Float] x 
  # @param [Float] y 
  # @return [Integer] 
  # @scope class
  attach_function :cairo_in_fill, :cairo_in_fill, [Cairo, :double, :double], :int
  
  # (Not documented)
  # 
  # @method cairo_in_clip(cr, x, y)
  # @param [Cairo] cr 
  # @param [Float] x 
  # @param [Float] y 
  # @return [Integer] 
  # @scope class
  attach_function :cairo_in_clip, :cairo_in_clip, [Cairo, :double, :double], :int
  
  # (Not documented)
  # 
  # @method cairo_stroke_extents(cr, x1, y1, x2, y2)
  # @param [Cairo] cr 
  # @param [FFI::Pointer(*Double)] x1 
  # @param [FFI::Pointer(*Double)] y1 
  # @param [FFI::Pointer(*Double)] x2 
  # @param [FFI::Pointer(*Double)] y2 
  # @return [nil] 
  # @scope class
  attach_function :cairo_stroke_extents, :cairo_stroke_extents, [Cairo, :pointer, :pointer, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method cairo_fill_extents(cr, x1, y1, x2, y2)
  # @param [Cairo] cr 
  # @param [FFI::Pointer(*Double)] x1 
  # @param [FFI::Pointer(*Double)] y1 
  # @param [FFI::Pointer(*Double)] x2 
  # @param [FFI::Pointer(*Double)] y2 
  # @return [nil] 
  # @scope class
  attach_function :cairo_fill_extents, :cairo_fill_extents, [Cairo, :pointer, :pointer, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method cairo_reset_clip(cr)
  # @param [Cairo] cr 
  # @return [nil] 
  # @scope class
  attach_function :cairo_reset_clip, :cairo_reset_clip, [Cairo], :void
  
  # (Not documented)
  # 
  # @method cairo_clip(cr)
  # @param [Cairo] cr 
  # @return [nil] 
  # @scope class
  attach_function :cairo_clip, :cairo_clip, [Cairo], :void
  
  # (Not documented)
  # 
  # @method cairo_clip_preserve(cr)
  # @param [Cairo] cr 
  # @return [nil] 
  # @scope class
  attach_function :cairo_clip_preserve, :cairo_clip_preserve, [Cairo], :void
  
  # (Not documented)
  # 
  # @method cairo_clip_extents(cr, x1, y1, x2, y2)
  # @param [Cairo] cr 
  # @param [FFI::Pointer(*Double)] x1 
  # @param [FFI::Pointer(*Double)] y1 
  # @param [FFI::Pointer(*Double)] x2 
  # @param [FFI::Pointer(*Double)] y2 
  # @return [nil] 
  # @scope class
  attach_function :cairo_clip_extents, :cairo_clip_extents, [Cairo, :pointer, :pointer, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :x ::
  #   (Float) 
  # :y ::
  #   (Float) 
  # :width ::
  #   (Float) 
  # :height ::
  #   (Float) 
  class CairoRectangle < FFI::Struct
    layout :x, :double,
           :y, :double,
           :width, :double,
           :height, :double
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :status ::
  #   (Symbol from _enum_cairo_status_) 
  # :rectangles ::
  #   (CairoRectangle) 
  # :num_rectangles ::
  #   (Integer) 
  module CairoRectangleListWrappers
    # @return [nil] 
    def destroy()
      Cairo.cairo_rectangle_list_destroy(self)
    end
  end
  
  class CairoRectangleList < FFI::Struct
    include CairoRectangleListWrappers
    layout :status, :cairo_status,
           :rectangles, CairoRectangle,
           :num_rectangles, :int
  end
  
  # (Not documented)
  # 
  # @method cairo_copy_clip_rectangle_list(cr)
  # @param [Cairo] cr 
  # @return [CairoRectangleList] 
  # @scope class
  attach_function :cairo_copy_clip_rectangle_list, :cairo_copy_clip_rectangle_list, [Cairo], CairoRectangleList
  
  # (Not documented)
  # 
  # @method cairo_rectangle_list_destroy(rectangle_list)
  # @param [CairoRectangleList] rectangle_list 
  # @return [nil] 
  # @scope class
  attach_function :cairo_rectangle_list_destroy, :cairo_rectangle_list_destroy, [CairoRectangleList], :void
  
  # (Not documented)
  module CairoScaledFontWrappers
    # @return [CairoScaledFont] 
    def reference()
      CairoScaledFont.new Cairo.cairo_scaled_font_reference(self)
    end
    
    # @return [nil] 
    def destroy()
      Cairo.cairo_scaled_font_destroy(self)
    end
    
    # @return [Integer] 
    def get_reference_count()
      Cairo.cairo_scaled_font_get_reference_count(self)
    end
    
    # @return [Symbol from _enum_cairo_status_] 
    def status()
      Cairo.cairo_scaled_font_status(self)
    end
    
    # @return [Symbol from _enum_cairo_font_type_] 
    def get_type()
      Cairo.cairo_scaled_font_get_type(self)
    end
    
    # @param [CairoUserDataKey] key 
    # @return [FFI::Pointer(*Void)] 
    def get_user_data(key)
      Cairo.cairo_scaled_font_get_user_data(self, key)
    end
    
    # @param [CairoUserDataKey] key 
    # @param [FFI::Pointer(*Void)] user_data 
    # @param [FFI::Pointer(CairoDestroyFuncT)] destroy 
    # @return [Symbol from _enum_cairo_status_] 
    def set_user_data(key, user_data, destroy)
      Cairo.cairo_scaled_font_set_user_data(self, key, user_data, destroy)
    end
    
    # @param [FFI::Pointer(*CairoFontExtentsT)] extents 
    # @return [nil] 
    def extents(extents)
      Cairo.cairo_scaled_font_extents(self, extents)
    end
    
    # @param [String] utf8 
    # @param [FFI::Pointer(*CairoTextExtentsT)] extents 
    # @return [nil] 
    def text_extents(utf8, extents)
      Cairo.cairo_scaled_font_text_extents(self, utf8, extents)
    end
    
    # @param [FFI::Pointer(*CairoGlyphT)] glyphs 
    # @param [Integer] num_glyphs 
    # @param [FFI::Pointer(*CairoTextExtentsT)] extents 
    # @return [nil] 
    def glyph_extents(glyphs, num_glyphs, extents)
      Cairo.cairo_scaled_font_glyph_extents(self, glyphs, num_glyphs, extents)
    end
    
    # @param [Float] x 
    # @param [Float] y 
    # @param [String] utf8 
    # @param [Integer] utf8_len 
    # @param [FFI::Pointer(**CairoGlyphT)] glyphs 
    # @param [FFI::Pointer(*Int)] num_glyphs 
    # @param [FFI::Pointer(**CairoTextClusterT)] clusters 
    # @param [FFI::Pointer(*Int)] num_clusters 
    # @param [FFI::Pointer(*CairoTextClusterFlagsT)] cluster_flags 
    # @return [Symbol from _enum_cairo_status_] 
    def text_to_glyphs(x, y, utf8, utf8_len, glyphs, num_glyphs, clusters, num_clusters, cluster_flags)
      Cairo.cairo_scaled_font_text_to_glyphs(self, x, y, utf8, utf8_len, glyphs, num_glyphs, clusters, num_clusters, cluster_flags)
    end
    
    # @return [CairoFontFace] 
    def get_font_face()
      CairoFontFace.new Cairo.cairo_scaled_font_get_font_face(self)
    end
    
    # @param [CairoMatrix] font_matrix 
    # @return [nil] 
    def get_font_matrix(font_matrix)
      Cairo.cairo_scaled_font_get_font_matrix(self, font_matrix)
    end
    
    # @param [CairoMatrix] ctm 
    # @return [nil] 
    def get_ctm(ctm)
      Cairo.cairo_scaled_font_get_ctm(self, ctm)
    end
    
    # @param [CairoMatrix] scale_matrix 
    # @return [nil] 
    def get_scale_matrix(scale_matrix)
      Cairo.cairo_scaled_font_get_scale_matrix(self, scale_matrix)
    end
    
    # @param [FFI::Pointer(*CairoFontOptions)] options 
    # @return [nil] 
    def get_font_options(options)
      Cairo.cairo_scaled_font_get_font_options(self, options)
    end
  end
  
  class CairoScaledFont < FFI::Struct
    include CairoScaledFontWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  module CairoFontFaceWrappers
    # @return [CairoFontFace] 
    def reference()
      CairoFontFace.new Cairo.cairo_font_face_reference(self)
    end
    
    # @return [nil] 
    def destroy()
      Cairo.cairo_font_face_destroy(self)
    end
    
    # @return [Integer] 
    def get_reference_count()
      Cairo.cairo_font_face_get_reference_count(self)
    end
    
    # @return [Symbol from _enum_cairo_status_] 
    def status()
      Cairo.cairo_font_face_status(self)
    end
    
    # @return [Symbol from _enum_cairo_font_type_] 
    def get_type()
      Cairo.cairo_font_face_get_type(self)
    end
    
    # @param [CairoUserDataKey] key 
    # @return [FFI::Pointer(*Void)] 
    def get_user_data(key)
      Cairo.cairo_font_face_get_user_data(self, key)
    end
    
    # @param [CairoUserDataKey] key 
    # @param [FFI::Pointer(*Void)] user_data 
    # @param [FFI::Pointer(CairoDestroyFuncT)] destroy 
    # @return [Symbol from _enum_cairo_status_] 
    def set_user_data(key, user_data, destroy)
      Cairo.cairo_font_face_set_user_data(self, key, user_data, destroy)
    end
  end
  
  class CairoFontFace < FFI::Struct
    include CairoFontFaceWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :index ::
  #   (Integer) 
  # :x ::
  #   (Float) 
  # :y ::
  #   (Float) 
  class CairoGlyphT < FFI::Struct
    layout :index, :ulong,
           :x, :double,
           :y, :double
  end
  
  # (Not documented)
  # 
  # @method cairo_glyph_allocate(num_glyphs)
  # @param [Integer] num_glyphs 
  # @return [CairoGlyphT] 
  # @scope class
  attach_function :cairo_glyph_allocate, :cairo_glyph_allocate, [:int], CairoGlyphT
  
  # (Not documented)
  # 
  # @method cairo_glyph_free(glyphs)
  # @param [CairoGlyphT] glyphs 
  # @return [nil] 
  # @scope class
  attach_function :cairo_glyph_free, :cairo_glyph_free, [CairoGlyphT], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :num_bytes ::
  #   (Integer) 
  # :num_glyphs ::
  #   (Integer) 
  class CairoTextClusterT < FFI::Struct
    layout :num_bytes, :int,
           :num_glyphs, :int
  end
  
  # (Not documented)
  # 
  # @method cairo_text_cluster_allocate(num_clusters)
  # @param [Integer] num_clusters 
  # @return [CairoTextClusterT] 
  # @scope class
  attach_function :cairo_text_cluster_allocate, :cairo_text_cluster_allocate, [:int], CairoTextClusterT
  
  # (Not documented)
  # 
  # @method cairo_text_cluster_free(clusters)
  # @param [CairoTextClusterT] clusters 
  # @return [nil] 
  # @scope class
  attach_function :cairo_text_cluster_free, :cairo_text_cluster_free, [CairoTextClusterT], :void
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_text_cluster_flags).</em>
  # 
  # === Options:
  # :cairo_text_cluster_flag_backward ::
  #   
  # 
  # @method _enum_cairo_text_cluster_flags_
  # @return [Symbol]
  # @scope class
  enum :cairo_text_cluster_flags, [
    :cairo_text_cluster_flag_backward, 1
  ]
  
  # (Not documented)
  # 
  # = Fields:
  # :x_bearing ::
  #   (Float) 
  # :y_bearing ::
  #   (Float) 
  # :width ::
  #   (Float) 
  # :height ::
  #   (Float) 
  # :x_advance ::
  #   (Float) 
  # :y_advance ::
  #   (Float) 
  class CairoTextExtentsT < FFI::Struct
    layout :x_bearing, :double,
           :y_bearing, :double,
           :width, :double,
           :height, :double,
           :x_advance, :double,
           :y_advance, :double
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :ascent ::
  #   (Float) 
  # :descent ::
  #   (Float) 
  # :height ::
  #   (Float) 
  # :max_x_advance ::
  #   (Float) 
  # :max_y_advance ::
  #   (Float) 
  class CairoFontExtentsT < FFI::Struct
    layout :ascent, :double,
           :descent, :double,
           :height, :double,
           :max_x_advance, :double,
           :max_y_advance, :double
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_font_slant).</em>
  # 
  # === Options:
  # :normal ::
  #   
  # :italic ::
  #   
  # :oblique ::
  #   
  # 
  # @method _enum_cairo_font_slant_
  # @return [Symbol]
  # @scope class
  enum :cairo_font_slant, [
    :normal, 0,
    :italic, 1,
    :oblique, 2
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_font_weight).</em>
  # 
  # === Options:
  # :normal ::
  #   
  # :bold ::
  #   
  # 
  # @method _enum_cairo_font_weight_
  # @return [Symbol]
  # @scope class
  enum :cairo_font_weight, [
    :normal, 0,
    :bold, 1
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_subpixel_order).</em>
  # 
  # === Options:
  # :default ::
  #   
  # :rgb ::
  #   
  # :bgr ::
  #   
  # :vrgb ::
  #   
  # :vbgr ::
  #   
  # 
  # @method _enum_cairo_subpixel_order_
  # @return [Symbol]
  # @scope class
  enum :cairo_subpixel_order, [
    :default, 0,
    :rgb, 1,
    :bgr, 2,
    :vrgb, 3,
    :vbgr, 4
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_hint_style).</em>
  # 
  # === Options:
  # :default ::
  #   
  # :none ::
  #   
  # :slight ::
  #   
  # :medium ::
  #   
  # :full ::
  #   
  # 
  # @method _enum_cairo_hint_style_
  # @return [Symbol]
  # @scope class
  enum :cairo_hint_style, [
    :default, 0,
    :none, 1,
    :slight, 2,
    :medium, 3,
    :full, 4
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_hint_metrics).</em>
  # 
  # === Options:
  # :default ::
  #   
  # :off ::
  #   
  # :on ::
  #   
  # 
  # @method _enum_cairo_hint_metrics_
  # @return [Symbol]
  # @scope class
  enum :cairo_hint_metrics, [
    :default, 0,
    :off, 1,
    :on, 2
  ]
  
  # (Not documented)
  module CairoFontOptionsWrappers
    # @return [CairoFontOptions] 
    def copy()
      CairoFontOptions.new Cairo.cairo_font_options_copy(self)
    end
    
    # @return [nil] 
    def destroy()
      Cairo.cairo_font_options_destroy(self)
    end
    
    # @return [Symbol from _enum_cairo_status_] 
    def status()
      Cairo.cairo_font_options_status(self)
    end
    
    # @param [FFI::Pointer(*CairoFontOptions)] other 
    # @return [nil] 
    def merge(other)
      Cairo.cairo_font_options_merge(self, other)
    end
    
    # @param [FFI::Pointer(*CairoFontOptions)] other 
    # @return [Integer] 
    def equal(other)
      Cairo.cairo_font_options_equal(self, other)
    end
    
    # @return [Integer] 
    def hash()
      Cairo.cairo_font_options_hash(self)
    end
    
    # @param [Symbol from _enum_cairo_antialias_] antialias 
    # @return [nil] 
    def set_antialias(antialias)
      Cairo.cairo_font_options_set_antialias(self, antialias)
    end
    
    # @return [Symbol from _enum_cairo_antialias_] 
    def get_antialias()
      Cairo.cairo_font_options_get_antialias(self)
    end
    
    # @param [Symbol from _enum_cairo_subpixel_order_] subpixel_order 
    # @return [nil] 
    def set_subpixel_order(subpixel_order)
      Cairo.cairo_font_options_set_subpixel_order(self, subpixel_order)
    end
    
    # @return [Symbol from _enum_cairo_subpixel_order_] 
    def get_subpixel_order()
      Cairo.cairo_font_options_get_subpixel_order(self)
    end
    
    # @param [Symbol from _enum_cairo_hint_style_] hint_style 
    # @return [nil] 
    def set_hint_style(hint_style)
      Cairo.cairo_font_options_set_hint_style(self, hint_style)
    end
    
    # @return [Symbol from _enum_cairo_hint_style_] 
    def get_hint_style()
      Cairo.cairo_font_options_get_hint_style(self)
    end
    
    # @param [Symbol from _enum_cairo_hint_metrics_] hint_metrics 
    # @return [nil] 
    def set_hint_metrics(hint_metrics)
      Cairo.cairo_font_options_set_hint_metrics(self, hint_metrics)
    end
    
    # @return [Symbol from _enum_cairo_hint_metrics_] 
    def get_hint_metrics()
      Cairo.cairo_font_options_get_hint_metrics(self)
    end
  end
  
  class CairoFontOptions < FFI::Struct
    include CairoFontOptionsWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # @method cairo_font_options_create()
  # @return [CairoFontOptions] 
  # @scope class
  attach_function :cairo_font_options_create, :cairo_font_options_create, [], CairoFontOptions
  
  # (Not documented)
  # 
  # @method cairo_font_options_copy(original)
  # @param [CairoFontOptions] original 
  # @return [CairoFontOptions] 
  # @scope class
  attach_function :cairo_font_options_copy, :cairo_font_options_copy, [CairoFontOptions], CairoFontOptions
  
  # (Not documented)
  # 
  # @method cairo_font_options_destroy(options)
  # @param [CairoFontOptions] options 
  # @return [nil] 
  # @scope class
  attach_function :cairo_font_options_destroy, :cairo_font_options_destroy, [CairoFontOptions], :void
  
  # (Not documented)
  # 
  # @method cairo_font_options_status(options)
  # @param [CairoFontOptions] options 
  # @return [Symbol from _enum_cairo_status_] 
  # @scope class
  attach_function :cairo_font_options_status, :cairo_font_options_status, [CairoFontOptions], :cairo_status
  
  # (Not documented)
  # 
  # @method cairo_font_options_merge(options, other)
  # @param [CairoFontOptions] options 
  # @param [CairoFontOptions] other 
  # @return [nil] 
  # @scope class
  attach_function :cairo_font_options_merge, :cairo_font_options_merge, [CairoFontOptions, CairoFontOptions], :void
  
  # (Not documented)
  # 
  # @method cairo_font_options_equal(options, other)
  # @param [CairoFontOptions] options 
  # @param [CairoFontOptions] other 
  # @return [Integer] 
  # @scope class
  attach_function :cairo_font_options_equal, :cairo_font_options_equal, [CairoFontOptions, CairoFontOptions], :int
  
  # (Not documented)
  # 
  # @method cairo_font_options_hash(options)
  # @param [CairoFontOptions] options 
  # @return [Integer] 
  # @scope class
  attach_function :cairo_font_options_hash, :cairo_font_options_hash, [CairoFontOptions], :ulong
  
  # (Not documented)
  # 
  # @method cairo_font_options_set_antialias(options, antialias)
  # @param [CairoFontOptions] options 
  # @param [Symbol from _enum_cairo_antialias_] antialias 
  # @return [nil] 
  # @scope class
  attach_function :cairo_font_options_set_antialias, :cairo_font_options_set_antialias, [CairoFontOptions, :cairo_antialias], :void
  
  # (Not documented)
  # 
  # @method cairo_font_options_get_antialias(options)
  # @param [CairoFontOptions] options 
  # @return [Symbol from _enum_cairo_antialias_] 
  # @scope class
  attach_function :cairo_font_options_get_antialias, :cairo_font_options_get_antialias, [CairoFontOptions], :cairo_antialias
  
  # (Not documented)
  # 
  # @method cairo_font_options_set_subpixel_order(options, subpixel_order)
  # @param [CairoFontOptions] options 
  # @param [Symbol from _enum_cairo_subpixel_order_] subpixel_order 
  # @return [nil] 
  # @scope class
  attach_function :cairo_font_options_set_subpixel_order, :cairo_font_options_set_subpixel_order, [CairoFontOptions, :cairo_subpixel_order], :void
  
  # (Not documented)
  # 
  # @method cairo_font_options_get_subpixel_order(options)
  # @param [CairoFontOptions] options 
  # @return [Symbol from _enum_cairo_subpixel_order_] 
  # @scope class
  attach_function :cairo_font_options_get_subpixel_order, :cairo_font_options_get_subpixel_order, [CairoFontOptions], :cairo_subpixel_order
  
  # (Not documented)
  # 
  # @method cairo_font_options_set_hint_style(options, hint_style)
  # @param [CairoFontOptions] options 
  # @param [Symbol from _enum_cairo_hint_style_] hint_style 
  # @return [nil] 
  # @scope class
  attach_function :cairo_font_options_set_hint_style, :cairo_font_options_set_hint_style, [CairoFontOptions, :cairo_hint_style], :void
  
  # (Not documented)
  # 
  # @method cairo_font_options_get_hint_style(options)
  # @param [CairoFontOptions] options 
  # @return [Symbol from _enum_cairo_hint_style_] 
  # @scope class
  attach_function :cairo_font_options_get_hint_style, :cairo_font_options_get_hint_style, [CairoFontOptions], :cairo_hint_style
  
  # (Not documented)
  # 
  # @method cairo_font_options_set_hint_metrics(options, hint_metrics)
  # @param [CairoFontOptions] options 
  # @param [Symbol from _enum_cairo_hint_metrics_] hint_metrics 
  # @return [nil] 
  # @scope class
  attach_function :cairo_font_options_set_hint_metrics, :cairo_font_options_set_hint_metrics, [CairoFontOptions, :cairo_hint_metrics], :void
  
  # (Not documented)
  # 
  # @method cairo_font_options_get_hint_metrics(options)
  # @param [CairoFontOptions] options 
  # @return [Symbol from _enum_cairo_hint_metrics_] 
  # @scope class
  attach_function :cairo_font_options_get_hint_metrics, :cairo_font_options_get_hint_metrics, [CairoFontOptions], :cairo_hint_metrics
  
  # (Not documented)
  # 
  # @method cairo_select_font_face(cr, family, slant, weight)
  # @param [Cairo] cr 
  # @param [String] family 
  # @param [Symbol from _enum_cairo_font_slant_] slant 
  # @param [Symbol from _enum_cairo_font_weight_] weight 
  # @return [nil] 
  # @scope class
  attach_function :cairo_select_font_face, :cairo_select_font_face, [Cairo, :string, :cairo_font_slant, :cairo_font_weight], :void
  
  # (Not documented)
  # 
  # @method cairo_set_font_size(cr, size)
  # @param [Cairo] cr 
  # @param [Float] size 
  # @return [nil] 
  # @scope class
  attach_function :cairo_set_font_size, :cairo_set_font_size, [Cairo, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_set_font_matrix(cr, matrix)
  # @param [Cairo] cr 
  # @param [CairoMatrix] matrix 
  # @return [nil] 
  # @scope class
  attach_function :cairo_set_font_matrix, :cairo_set_font_matrix, [Cairo, CairoMatrix], :void
  
  # (Not documented)
  # 
  # @method cairo_get_font_matrix(cr, matrix)
  # @param [Cairo] cr 
  # @param [CairoMatrix] matrix 
  # @return [nil] 
  # @scope class
  attach_function :cairo_get_font_matrix, :cairo_get_font_matrix, [Cairo, CairoMatrix], :void
  
  # (Not documented)
  # 
  # @method cairo_set_font_options(cr, options)
  # @param [Cairo] cr 
  # @param [CairoFontOptions] options 
  # @return [nil] 
  # @scope class
  attach_function :cairo_set_font_options, :cairo_set_font_options, [Cairo, CairoFontOptions], :void
  
  # (Not documented)
  # 
  # @method cairo_get_font_options(cr, options)
  # @param [Cairo] cr 
  # @param [CairoFontOptions] options 
  # @return [nil] 
  # @scope class
  attach_function :cairo_get_font_options, :cairo_get_font_options, [Cairo, CairoFontOptions], :void
  
  # (Not documented)
  # 
  # @method cairo_set_font_face(cr, font_face)
  # @param [Cairo] cr 
  # @param [CairoFontFace] font_face 
  # @return [nil] 
  # @scope class
  attach_function :cairo_set_font_face, :cairo_set_font_face, [Cairo, CairoFontFace], :void
  
  # (Not documented)
  # 
  # @method cairo_get_font_face(cr)
  # @param [Cairo] cr 
  # @return [CairoFontFace] 
  # @scope class
  attach_function :cairo_get_font_face, :cairo_get_font_face, [Cairo], CairoFontFace
  
  # (Not documented)
  # 
  # @method cairo_set_scaled_font(cr, scaled_font)
  # @param [Cairo] cr 
  # @param [CairoScaledFont] scaled_font 
  # @return [nil] 
  # @scope class
  attach_function :cairo_set_scaled_font, :cairo_set_scaled_font, [Cairo, CairoScaledFont], :void
  
  # (Not documented)
  # 
  # @method cairo_get_scaled_font(cr)
  # @param [Cairo] cr 
  # @return [CairoScaledFont] 
  # @scope class
  attach_function :cairo_get_scaled_font, :cairo_get_scaled_font, [Cairo], CairoScaledFont
  
  # (Not documented)
  # 
  # @method cairo_show_text(cr, utf8)
  # @param [Cairo] cr 
  # @param [String] utf8 
  # @return [nil] 
  # @scope class
  attach_function :cairo_show_text, :cairo_show_text, [Cairo, :string], :void
  
  # (Not documented)
  # 
  # @method cairo_show_glyphs(cr, glyphs, num_glyphs)
  # @param [Cairo] cr 
  # @param [CairoGlyphT] glyphs 
  # @param [Integer] num_glyphs 
  # @return [nil] 
  # @scope class
  attach_function :cairo_show_glyphs, :cairo_show_glyphs, [Cairo, CairoGlyphT, :int], :void
  
  # (Not documented)
  # 
  # @method cairo_show_text_glyphs(cr, utf8, utf8_len, glyphs, num_glyphs, clusters, num_clusters, cluster_flags)
  # @param [Cairo] cr 
  # @param [String] utf8 
  # @param [Integer] utf8_len 
  # @param [CairoGlyphT] glyphs 
  # @param [Integer] num_glyphs 
  # @param [CairoTextClusterT] clusters 
  # @param [Integer] num_clusters 
  # @param [Symbol from _enum_cairo_text_cluster_flags_] cluster_flags 
  # @return [nil] 
  # @scope class
  attach_function :cairo_show_text_glyphs, :cairo_show_text_glyphs, [Cairo, :string, :int, CairoGlyphT, :int, CairoTextClusterT, :int, :cairo_text_cluster_flags], :void
  
  # (Not documented)
  # 
  # @method cairo_text_path(cr, utf8)
  # @param [Cairo] cr 
  # @param [String] utf8 
  # @return [nil] 
  # @scope class
  attach_function :cairo_text_path, :cairo_text_path, [Cairo, :string], :void
  
  # (Not documented)
  # 
  # @method cairo_glyph_path(cr, glyphs, num_glyphs)
  # @param [Cairo] cr 
  # @param [CairoGlyphT] glyphs 
  # @param [Integer] num_glyphs 
  # @return [nil] 
  # @scope class
  attach_function :cairo_glyph_path, :cairo_glyph_path, [Cairo, CairoGlyphT, :int], :void
  
  # (Not documented)
  # 
  # @method cairo_text_extents(cr, utf8, extents)
  # @param [Cairo] cr 
  # @param [String] utf8 
  # @param [CairoTextExtentsT] extents 
  # @return [nil] 
  # @scope class
  attach_function :cairo_text_extents, :cairo_text_extents, [Cairo, :string, CairoTextExtentsT], :void
  
  # (Not documented)
  # 
  # @method cairo_glyph_extents(cr, glyphs, num_glyphs, extents)
  # @param [Cairo] cr 
  # @param [CairoGlyphT] glyphs 
  # @param [Integer] num_glyphs 
  # @param [CairoTextExtentsT] extents 
  # @return [nil] 
  # @scope class
  attach_function :cairo_glyph_extents, :cairo_glyph_extents, [Cairo, CairoGlyphT, :int, CairoTextExtentsT], :void
  
  # (Not documented)
  # 
  # @method cairo_font_extents(cr, extents)
  # @param [Cairo] cr 
  # @param [CairoFontExtentsT] extents 
  # @return [nil] 
  # @scope class
  attach_function :cairo_font_extents, :cairo_font_extents, [Cairo, CairoFontExtentsT], :void
  
  # (Not documented)
  # 
  # @method cairo_font_face_reference(font_face)
  # @param [CairoFontFace] font_face 
  # @return [CairoFontFace] 
  # @scope class
  attach_function :cairo_font_face_reference, :cairo_font_face_reference, [CairoFontFace], CairoFontFace
  
  # (Not documented)
  # 
  # @method cairo_font_face_destroy(font_face)
  # @param [CairoFontFace] font_face 
  # @return [nil] 
  # @scope class
  attach_function :cairo_font_face_destroy, :cairo_font_face_destroy, [CairoFontFace], :void
  
  # (Not documented)
  # 
  # @method cairo_font_face_get_reference_count(font_face)
  # @param [CairoFontFace] font_face 
  # @return [Integer] 
  # @scope class
  attach_function :cairo_font_face_get_reference_count, :cairo_font_face_get_reference_count, [CairoFontFace], :uint
  
  # (Not documented)
  # 
  # @method cairo_font_face_status(font_face)
  # @param [CairoFontFace] font_face 
  # @return [Symbol from _enum_cairo_status_] 
  # @scope class
  attach_function :cairo_font_face_status, :cairo_font_face_status, [CairoFontFace], :cairo_status
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_font_type).</em>
  # 
  # === Options:
  # :toy ::
  #   
  # :ft ::
  #   
  # :win32 ::
  #   
  # :quartz ::
  #   
  # :user ::
  #   
  # 
  # @method _enum_cairo_font_type_
  # @return [Symbol]
  # @scope class
  enum :cairo_font_type, [
    :toy, 0,
    :ft, 1,
    :win32, 2,
    :quartz, 3,
    :user, 4
  ]
  
  # (Not documented)
  # 
  # @method cairo_font_face_get_type(font_face)
  # @param [CairoFontFace] font_face 
  # @return [Symbol from _enum_cairo_font_type_] 
  # @scope class
  attach_function :cairo_font_face_get_type, :cairo_font_face_get_type, [CairoFontFace], :cairo_font_type
  
  # (Not documented)
  # 
  # @method cairo_font_face_get_user_data(font_face, key)
  # @param [CairoFontFace] font_face 
  # @param [CairoUserDataKey] key 
  # @return [FFI::Pointer(*Void)] 
  # @scope class
  attach_function :cairo_font_face_get_user_data, :cairo_font_face_get_user_data, [CairoFontFace, CairoUserDataKey], :pointer
  
  # (Not documented)
  # 
  # @method cairo_font_face_set_user_data(font_face, key, user_data, destroy)
  # @param [CairoFontFace] font_face 
  # @param [CairoUserDataKey] key 
  # @param [FFI::Pointer(*Void)] user_data 
  # @param [FFI::Pointer(CairoDestroyFuncT)] destroy 
  # @return [Symbol from _enum_cairo_status_] 
  # @scope class
  attach_function :cairo_font_face_set_user_data, :cairo_font_face_set_user_data, [CairoFontFace, CairoUserDataKey, :pointer, :pointer], :cairo_status
  
  # (Not documented)
  # 
  # @method cairo_scaled_font_create(font_face, font_matrix, ctm, options)
  # @param [CairoFontFace] font_face 
  # @param [CairoMatrix] font_matrix 
  # @param [CairoMatrix] ctm 
  # @param [CairoFontOptions] options 
  # @return [CairoScaledFont] 
  # @scope class
  attach_function :cairo_scaled_font_create, :cairo_scaled_font_create, [CairoFontFace, CairoMatrix, CairoMatrix, CairoFontOptions], CairoScaledFont
  
  # (Not documented)
  # 
  # @method cairo_scaled_font_reference(scaled_font)
  # @param [CairoScaledFont] scaled_font 
  # @return [CairoScaledFont] 
  # @scope class
  attach_function :cairo_scaled_font_reference, :cairo_scaled_font_reference, [CairoScaledFont], CairoScaledFont
  
  # (Not documented)
  # 
  # @method cairo_scaled_font_destroy(scaled_font)
  # @param [CairoScaledFont] scaled_font 
  # @return [nil] 
  # @scope class
  attach_function :cairo_scaled_font_destroy, :cairo_scaled_font_destroy, [CairoScaledFont], :void
  
  # (Not documented)
  # 
  # @method cairo_scaled_font_get_reference_count(scaled_font)
  # @param [CairoScaledFont] scaled_font 
  # @return [Integer] 
  # @scope class
  attach_function :cairo_scaled_font_get_reference_count, :cairo_scaled_font_get_reference_count, [CairoScaledFont], :uint
  
  # (Not documented)
  # 
  # @method cairo_scaled_font_status(scaled_font)
  # @param [CairoScaledFont] scaled_font 
  # @return [Symbol from _enum_cairo_status_] 
  # @scope class
  attach_function :cairo_scaled_font_status, :cairo_scaled_font_status, [CairoScaledFont], :cairo_status
  
  # (Not documented)
  # 
  # @method cairo_scaled_font_get_type(scaled_font)
  # @param [CairoScaledFont] scaled_font 
  # @return [Symbol from _enum_cairo_font_type_] 
  # @scope class
  attach_function :cairo_scaled_font_get_type, :cairo_scaled_font_get_type, [CairoScaledFont], :cairo_font_type
  
  # (Not documented)
  # 
  # @method cairo_scaled_font_get_user_data(scaled_font, key)
  # @param [CairoScaledFont] scaled_font 
  # @param [CairoUserDataKey] key 
  # @return [FFI::Pointer(*Void)] 
  # @scope class
  attach_function :cairo_scaled_font_get_user_data, :cairo_scaled_font_get_user_data, [CairoScaledFont, CairoUserDataKey], :pointer
  
  # (Not documented)
  # 
  # @method cairo_scaled_font_set_user_data(scaled_font, key, user_data, destroy)
  # @param [CairoScaledFont] scaled_font 
  # @param [CairoUserDataKey] key 
  # @param [FFI::Pointer(*Void)] user_data 
  # @param [FFI::Pointer(CairoDestroyFuncT)] destroy 
  # @return [Symbol from _enum_cairo_status_] 
  # @scope class
  attach_function :cairo_scaled_font_set_user_data, :cairo_scaled_font_set_user_data, [CairoScaledFont, CairoUserDataKey, :pointer, :pointer], :cairo_status
  
  # (Not documented)
  # 
  # @method cairo_scaled_font_extents(scaled_font, extents)
  # @param [CairoScaledFont] scaled_font 
  # @param [CairoFontExtentsT] extents 
  # @return [nil] 
  # @scope class
  attach_function :cairo_scaled_font_extents, :cairo_scaled_font_extents, [CairoScaledFont, CairoFontExtentsT], :void
  
  # (Not documented)
  # 
  # @method cairo_scaled_font_text_extents(scaled_font, utf8, extents)
  # @param [CairoScaledFont] scaled_font 
  # @param [String] utf8 
  # @param [CairoTextExtentsT] extents 
  # @return [nil] 
  # @scope class
  attach_function :cairo_scaled_font_text_extents, :cairo_scaled_font_text_extents, [CairoScaledFont, :string, CairoTextExtentsT], :void
  
  # (Not documented)
  # 
  # @method cairo_scaled_font_glyph_extents(scaled_font, glyphs, num_glyphs, extents)
  # @param [CairoScaledFont] scaled_font 
  # @param [CairoGlyphT] glyphs 
  # @param [Integer] num_glyphs 
  # @param [CairoTextExtentsT] extents 
  # @return [nil] 
  # @scope class
  attach_function :cairo_scaled_font_glyph_extents, :cairo_scaled_font_glyph_extents, [CairoScaledFont, CairoGlyphT, :int, CairoTextExtentsT], :void
  
  # (Not documented)
  # 
  # @method cairo_scaled_font_text_to_glyphs(scaled_font, x, y, utf8, utf8_len, glyphs, num_glyphs, clusters, num_clusters, cluster_flags)
  # @param [CairoScaledFont] scaled_font 
  # @param [Float] x 
  # @param [Float] y 
  # @param [String] utf8 
  # @param [Integer] utf8_len 
  # @param [FFI::Pointer(**CairoGlyphT)] glyphs 
  # @param [FFI::Pointer(*Int)] num_glyphs 
  # @param [FFI::Pointer(**CairoTextClusterT)] clusters 
  # @param [FFI::Pointer(*Int)] num_clusters 
  # @param [FFI::Pointer(*CairoTextClusterFlagsT)] cluster_flags 
  # @return [Symbol from _enum_cairo_status_] 
  # @scope class
  attach_function :cairo_scaled_font_text_to_glyphs, :cairo_scaled_font_text_to_glyphs, [CairoScaledFont, :double, :double, :string, :int, :pointer, :pointer, :pointer, :pointer, :pointer], :cairo_status
  
  # (Not documented)
  # 
  # @method cairo_scaled_font_get_font_face(scaled_font)
  # @param [CairoScaledFont] scaled_font 
  # @return [CairoFontFace] 
  # @scope class
  attach_function :cairo_scaled_font_get_font_face, :cairo_scaled_font_get_font_face, [CairoScaledFont], CairoFontFace
  
  # (Not documented)
  # 
  # @method cairo_scaled_font_get_font_matrix(scaled_font, font_matrix)
  # @param [CairoScaledFont] scaled_font 
  # @param [CairoMatrix] font_matrix 
  # @return [nil] 
  # @scope class
  attach_function :cairo_scaled_font_get_font_matrix, :cairo_scaled_font_get_font_matrix, [CairoScaledFont, CairoMatrix], :void
  
  # (Not documented)
  # 
  # @method cairo_scaled_font_get_ctm(scaled_font, ctm)
  # @param [CairoScaledFont] scaled_font 
  # @param [CairoMatrix] ctm 
  # @return [nil] 
  # @scope class
  attach_function :cairo_scaled_font_get_ctm, :cairo_scaled_font_get_ctm, [CairoScaledFont, CairoMatrix], :void
  
  # (Not documented)
  # 
  # @method cairo_scaled_font_get_scale_matrix(scaled_font, scale_matrix)
  # @param [CairoScaledFont] scaled_font 
  # @param [CairoMatrix] scale_matrix 
  # @return [nil] 
  # @scope class
  attach_function :cairo_scaled_font_get_scale_matrix, :cairo_scaled_font_get_scale_matrix, [CairoScaledFont, CairoMatrix], :void
  
  # (Not documented)
  # 
  # @method cairo_scaled_font_get_font_options(scaled_font, options)
  # @param [CairoScaledFont] scaled_font 
  # @param [CairoFontOptions] options 
  # @return [nil] 
  # @scope class
  attach_function :cairo_scaled_font_get_font_options, :cairo_scaled_font_get_font_options, [CairoScaledFont, CairoFontOptions], :void
  
  # (Not documented)
  # 
  # @method cairo_toy_font_face_create(family, slant, weight)
  # @param [String] family 
  # @param [Symbol from _enum_cairo_font_slant_] slant 
  # @param [Symbol from _enum_cairo_font_weight_] weight 
  # @return [CairoFontFace] 
  # @scope class
  attach_function :cairo_toy_font_face_create, :cairo_toy_font_face_create, [:string, :cairo_font_slant, :cairo_font_weight], CairoFontFace
  
  # (Not documented)
  # 
  # @method cairo_toy_font_face_get_family(font_face)
  # @param [CairoFontFace] font_face 
  # @return [String] 
  # @scope class
  attach_function :cairo_toy_font_face_get_family, :cairo_toy_font_face_get_family, [CairoFontFace], :string
  
  # (Not documented)
  # 
  # @method cairo_toy_font_face_get_slant(font_face)
  # @param [CairoFontFace] font_face 
  # @return [Symbol from _enum_cairo_font_slant_] 
  # @scope class
  attach_function :cairo_toy_font_face_get_slant, :cairo_toy_font_face_get_slant, [CairoFontFace], :cairo_font_slant
  
  # (Not documented)
  # 
  # @method cairo_toy_font_face_get_weight(font_face)
  # @param [CairoFontFace] font_face 
  # @return [Symbol from _enum_cairo_font_weight_] 
  # @scope class
  attach_function :cairo_toy_font_face_get_weight, :cairo_toy_font_face_get_weight, [CairoFontFace], :cairo_font_weight
  
  # (Not documented)
  # 
  # @method cairo_user_font_face_create()
  # @return [CairoFontFace] 
  # @scope class
  attach_function :cairo_user_font_face_create, :cairo_user_font_face_create, [], CairoFontFace
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_cairo_user_scaled_font_init_func_t_(cairo_status_t, scaled_font, cr, extents)
  # @param [Symbol from _enum_cairo_status_] cairo_status_t 
  # @param [CairoScaledFont] scaled_font 
  # @param [Cairo] cr 
  # @param [CairoFontExtentsT] extents 
  # @return [Symbol from _enum_cairo_status_] 
  # @scope class
  callback :cairo_user_scaled_font_init_func_t, [:cairo_status, CairoScaledFont, Cairo, CairoFontExtentsT], :cairo_status
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_cairo_user_scaled_font_render_glyph_func_t_(cairo_status_t, scaled_font, glyph, cr, extents)
  # @param [Symbol from _enum_cairo_status_] cairo_status_t 
  # @param [CairoScaledFont] scaled_font 
  # @param [Integer] glyph 
  # @param [Cairo] cr 
  # @param [CairoTextExtentsT] extents 
  # @return [Symbol from _enum_cairo_status_] 
  # @scope class
  callback :cairo_user_scaled_font_render_glyph_func_t, [:cairo_status, CairoScaledFont, :ulong, Cairo, CairoTextExtentsT], :cairo_status
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_cairo_user_scaled_font_text_to_glyphs_func_t_(cairo_status_t, scaled_font, utf8, utf8_len, glyphs, num_glyphs, clusters, num_clusters, cluster_flags)
  # @param [Symbol from _enum_cairo_status_] cairo_status_t 
  # @param [CairoScaledFont] scaled_font 
  # @param [String] utf8 
  # @param [Integer] utf8_len 
  # @param [FFI::Pointer(**CairoGlyphT)] glyphs 
  # @param [FFI::Pointer(*Int)] num_glyphs 
  # @param [FFI::Pointer(**CairoTextClusterT)] clusters 
  # @param [FFI::Pointer(*Int)] num_clusters 
  # @param [FFI::Pointer(*CairoTextClusterFlagsT)] cluster_flags 
  # @return [Symbol from _enum_cairo_status_] 
  # @scope class
  callback :cairo_user_scaled_font_text_to_glyphs_func_t, [:cairo_status, CairoScaledFont, :string, :int, :pointer, :pointer, :pointer, :pointer, :pointer], :cairo_status
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_cairo_user_scaled_font_unicode_to_glyph_func_t_(cairo_status_t, scaled_font, unicode, glyph_index)
  # @param [Symbol from _enum_cairo_status_] cairo_status_t 
  # @param [CairoScaledFont] scaled_font 
  # @param [Integer] unicode 
  # @param [FFI::Pointer(*ULong)] glyph_index 
  # @return [Symbol from _enum_cairo_status_] 
  # @scope class
  callback :cairo_user_scaled_font_unicode_to_glyph_func_t, [:cairo_status, CairoScaledFont, :ulong, :pointer], :cairo_status
  
  # (Not documented)
  # 
  # @method cairo_user_font_face_set_init_func(font_face, init_func)
  # @param [CairoFontFace] font_face 
  # @param [Proc(_callback_cairo_user_scaled_font_init_func_t_)] init_func 
  # @return [nil] 
  # @scope class
  attach_function :cairo_user_font_face_set_init_func, :cairo_user_font_face_set_init_func, [CairoFontFace, :cairo_user_scaled_font_init_func_t], :void
  
  # (Not documented)
  # 
  # @method cairo_user_font_face_set_render_glyph_func(font_face, render_glyph_func)
  # @param [CairoFontFace] font_face 
  # @param [Proc(_callback_cairo_user_scaled_font_render_glyph_func_t_)] render_glyph_func 
  # @return [nil] 
  # @scope class
  attach_function :cairo_user_font_face_set_render_glyph_func, :cairo_user_font_face_set_render_glyph_func, [CairoFontFace, :cairo_user_scaled_font_render_glyph_func_t], :void
  
  # (Not documented)
  # 
  # @method cairo_user_font_face_set_text_to_glyphs_func(font_face, text_to_glyphs_func)
  # @param [CairoFontFace] font_face 
  # @param [Proc(_callback_cairo_user_scaled_font_text_to_glyphs_func_t_)] text_to_glyphs_func 
  # @return [nil] 
  # @scope class
  attach_function :cairo_user_font_face_set_text_to_glyphs_func, :cairo_user_font_face_set_text_to_glyphs_func, [CairoFontFace, :cairo_user_scaled_font_text_to_glyphs_func_t], :void
  
  # (Not documented)
  # 
  # @method cairo_user_font_face_set_unicode_to_glyph_func(font_face, unicode_to_glyph_func)
  # @param [CairoFontFace] font_face 
  # @param [Proc(_callback_cairo_user_scaled_font_unicode_to_glyph_func_t_)] unicode_to_glyph_func 
  # @return [nil] 
  # @scope class
  attach_function :cairo_user_font_face_set_unicode_to_glyph_func, :cairo_user_font_face_set_unicode_to_glyph_func, [CairoFontFace, :cairo_user_scaled_font_unicode_to_glyph_func_t], :void
  
  # (Not documented)
  # 
  # @method cairo_user_font_face_get_init_func(font_face)
  # @param [CairoFontFace] font_face 
  # @return [Proc(_callback_cairo_user_scaled_font_init_func_t_)] 
  # @scope class
  attach_function :cairo_user_font_face_get_init_func, :cairo_user_font_face_get_init_func, [CairoFontFace], :cairo_user_scaled_font_init_func_t
  
  # (Not documented)
  # 
  # @method cairo_user_font_face_get_render_glyph_func(font_face)
  # @param [CairoFontFace] font_face 
  # @return [Proc(_callback_cairo_user_scaled_font_render_glyph_func_t_)] 
  # @scope class
  attach_function :cairo_user_font_face_get_render_glyph_func, :cairo_user_font_face_get_render_glyph_func, [CairoFontFace], :cairo_user_scaled_font_render_glyph_func_t
  
  # (Not documented)
  # 
  # @method cairo_user_font_face_get_text_to_glyphs_func(font_face)
  # @param [CairoFontFace] font_face 
  # @return [Proc(_callback_cairo_user_scaled_font_text_to_glyphs_func_t_)] 
  # @scope class
  attach_function :cairo_user_font_face_get_text_to_glyphs_func, :cairo_user_font_face_get_text_to_glyphs_func, [CairoFontFace], :cairo_user_scaled_font_text_to_glyphs_func_t
  
  # (Not documented)
  # 
  # @method cairo_user_font_face_get_unicode_to_glyph_func(font_face)
  # @param [CairoFontFace] font_face 
  # @return [Proc(_callback_cairo_user_scaled_font_unicode_to_glyph_func_t_)] 
  # @scope class
  attach_function :cairo_user_font_face_get_unicode_to_glyph_func, :cairo_user_font_face_get_unicode_to_glyph_func, [CairoFontFace], :cairo_user_scaled_font_unicode_to_glyph_func_t
  
  # (Not documented)
  # 
  # @method cairo_get_operator(cr)
  # @param [Cairo] cr 
  # @return [Symbol from _enum_cairo_operator_] 
  # @scope class
  attach_function :cairo_get_operator, :cairo_get_operator, [Cairo], :cairo_operator
  
  # (Not documented)
  # 
  # @method cairo_get_source(cr)
  # @param [Cairo] cr 
  # @return [CairoPattern] 
  # @scope class
  attach_function :cairo_get_source, :cairo_get_source, [Cairo], CairoPattern
  
  # (Not documented)
  # 
  # @method cairo_get_tolerance(cr)
  # @param [Cairo] cr 
  # @return [Float] 
  # @scope class
  attach_function :cairo_get_tolerance, :cairo_get_tolerance, [Cairo], :double
  
  # (Not documented)
  # 
  # @method cairo_get_antialias(cr)
  # @param [Cairo] cr 
  # @return [Symbol from _enum_cairo_antialias_] 
  # @scope class
  attach_function :cairo_get_antialias, :cairo_get_antialias, [Cairo], :cairo_antialias
  
  # (Not documented)
  # 
  # @method cairo_has_current_point(cr)
  # @param [Cairo] cr 
  # @return [Integer] 
  # @scope class
  attach_function :cairo_has_current_point, :cairo_has_current_point, [Cairo], :int
  
  # (Not documented)
  # 
  # @method cairo_get_current_point(cr, x, y)
  # @param [Cairo] cr 
  # @param [FFI::Pointer(*Double)] x 
  # @param [FFI::Pointer(*Double)] y 
  # @return [nil] 
  # @scope class
  attach_function :cairo_get_current_point, :cairo_get_current_point, [Cairo, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method cairo_get_fill_rule(cr)
  # @param [Cairo] cr 
  # @return [Symbol from _enum_cairo_fill_rule_] 
  # @scope class
  attach_function :cairo_get_fill_rule, :cairo_get_fill_rule, [Cairo], :cairo_fill_rule
  
  # (Not documented)
  # 
  # @method cairo_get_line_width(cr)
  # @param [Cairo] cr 
  # @return [Float] 
  # @scope class
  attach_function :cairo_get_line_width, :cairo_get_line_width, [Cairo], :double
  
  # (Not documented)
  # 
  # @method cairo_get_line_cap(cr)
  # @param [Cairo] cr 
  # @return [Symbol from _enum_cairo_line_cap_] 
  # @scope class
  attach_function :cairo_get_line_cap, :cairo_get_line_cap, [Cairo], :cairo_line_cap
  
  # (Not documented)
  # 
  # @method cairo_get_line_join(cr)
  # @param [Cairo] cr 
  # @return [Symbol from _enum_cairo_line_join_] 
  # @scope class
  attach_function :cairo_get_line_join, :cairo_get_line_join, [Cairo], :cairo_line_join
  
  # (Not documented)
  # 
  # @method cairo_get_miter_limit(cr)
  # @param [Cairo] cr 
  # @return [Float] 
  # @scope class
  attach_function :cairo_get_miter_limit, :cairo_get_miter_limit, [Cairo], :double
  
  # (Not documented)
  # 
  # @method cairo_get_dash_count(cr)
  # @param [Cairo] cr 
  # @return [Integer] 
  # @scope class
  attach_function :cairo_get_dash_count, :cairo_get_dash_count, [Cairo], :int
  
  # (Not documented)
  # 
  # @method cairo_get_dash(cr, dashes, offset)
  # @param [Cairo] cr 
  # @param [FFI::Pointer(*Double)] dashes 
  # @param [FFI::Pointer(*Double)] offset 
  # @return [nil] 
  # @scope class
  attach_function :cairo_get_dash, :cairo_get_dash, [Cairo, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method cairo_get_matrix(cr, matrix)
  # @param [Cairo] cr 
  # @param [CairoMatrix] matrix 
  # @return [nil] 
  # @scope class
  attach_function :cairo_get_matrix, :cairo_get_matrix, [Cairo, CairoMatrix], :void
  
  # (Not documented)
  # 
  # @method cairo_get_target(cr)
  # @param [Cairo] cr 
  # @return [CairoSurface] 
  # @scope class
  attach_function :cairo_get_target, :cairo_get_target, [Cairo], CairoSurface
  
  # (Not documented)
  # 
  # @method cairo_get_group_target(cr)
  # @param [Cairo] cr 
  # @return [CairoSurface] 
  # @scope class
  attach_function :cairo_get_group_target, :cairo_get_group_target, [Cairo], CairoSurface
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_path_data_type).</em>
  # 
  # === Options:
  # :move_to ::
  #   
  # :line_to ::
  #   
  # :curve_to ::
  #   
  # :close_path ::
  #   
  # 
  # @method _enum_cairo_path_data_type_
  # @return [Symbol]
  # @scope class
  enum :cairo_path_data_type, [
    :move_to, 0,
    :line_to, 1,
    :curve_to, 2,
    :close_path, 3
  ]
  
  # (Not documented)
  # 
  # = Fields:
  # :type ::
  #   (Symbol from _enum_cairo_path_data_type_) 
  # :length ::
  #   (Integer) 
  class CairoPathDataTHeader < FFI::Struct
    layout :type, :cairo_path_data_type,
           :length, :int
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :x ::
  #   (Float) 
  # :y ::
  #   (Float) 
  class CairoPathDataTPoint < FFI::Struct
    layout :x, :double,
           :y, :double
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :header ::
  #   (CairoPathDataTHeader) 
  # :point ::
  #   (CairoPathDataTPoint) 
  class CairoPathDataT < FFI::Union
    layout :header, CairoPathDataTHeader.by_value,
           :point, CairoPathDataTPoint.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :status ::
  #   (Symbol from _enum_cairo_status_) 
  # :data ::
  #   (CairoPathDataT) 
  # :num_data ::
  #   (Integer) 
  module CairoPathWrappers
    # @return [nil] 
    def destroy()
      Cairo.cairo_path_destroy(self)
    end
  end
  
  class CairoPath < FFI::Struct
    include CairoPathWrappers
    layout :status, :cairo_status,
           :data, CairoPathDataT,
           :num_data, :int
  end
  
  # (Not documented)
  # 
  # @method cairo_copy_path(cr)
  # @param [Cairo] cr 
  # @return [CairoPath] 
  # @scope class
  attach_function :cairo_copy_path, :cairo_copy_path, [Cairo], CairoPath
  
  # (Not documented)
  # 
  # @method cairo_copy_path_flat(cr)
  # @param [Cairo] cr 
  # @return [CairoPath] 
  # @scope class
  attach_function :cairo_copy_path_flat, :cairo_copy_path_flat, [Cairo], CairoPath
  
  # (Not documented)
  # 
  # @method cairo_append_path(cr, path)
  # @param [Cairo] cr 
  # @param [CairoPath] path 
  # @return [nil] 
  # @scope class
  attach_function :cairo_append_path, :cairo_append_path, [Cairo, CairoPath], :void
  
  # (Not documented)
  # 
  # @method cairo_path_destroy(path)
  # @param [CairoPath] path 
  # @return [nil] 
  # @scope class
  attach_function :cairo_path_destroy, :cairo_path_destroy, [CairoPath], :void
  
  # (Not documented)
  # 
  # @method cairo_status(cr)
  # @param [Cairo] cr 
  # @return [Symbol from _enum_cairo_status_] 
  # @scope class
  attach_function :cairo_status, :cairo_status, [Cairo], :cairo_status
  
  # (Not documented)
  # 
  # @method cairo_status_to_string(status)
  # @param [Symbol from _enum_cairo_status_] status 
  # @return [String] 
  # @scope class
  attach_function :cairo_status_to_string, :cairo_status_to_string, [:cairo_status], :string
  
  # (Not documented)
  # 
  # @method cairo_device_reference(device)
  # @param [CairoDevice] device 
  # @return [CairoDevice] 
  # @scope class
  attach_function :cairo_device_reference, :cairo_device_reference, [CairoDevice], CairoDevice
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_device_type).</em>
  # 
  # === Options:
  # :drm ::
  #   
  # :gl ::
  #   
  # :script ::
  #   
  # :xcb ::
  #   
  # :xlib ::
  #   
  # :xml ::
  #   
  # 
  # @method _enum_cairo_device_type_
  # @return [Symbol]
  # @scope class
  enum :cairo_device_type, [
    :drm, 0,
    :gl, 1,
    :script, 2,
    :xcb, 3,
    :xlib, 4,
    :xml, 5
  ]
  
  # (Not documented)
  # 
  # @method cairo_device_get_type(device)
  # @param [CairoDevice] device 
  # @return [Symbol from _enum_cairo_device_type_] 
  # @scope class
  attach_function :cairo_device_get_type, :cairo_device_get_type, [CairoDevice], :cairo_device_type
  
  # (Not documented)
  # 
  # @method cairo_device_status(device)
  # @param [CairoDevice] device 
  # @return [Symbol from _enum_cairo_status_] 
  # @scope class
  attach_function :cairo_device_status, :cairo_device_status, [CairoDevice], :cairo_status
  
  # (Not documented)
  # 
  # @method cairo_device_acquire(device)
  # @param [CairoDevice] device 
  # @return [Symbol from _enum_cairo_status_] 
  # @scope class
  attach_function :cairo_device_acquire, :cairo_device_acquire, [CairoDevice], :cairo_status
  
  # (Not documented)
  # 
  # @method cairo_device_release(device)
  # @param [CairoDevice] device 
  # @return [nil] 
  # @scope class
  attach_function :cairo_device_release, :cairo_device_release, [CairoDevice], :void
  
  # (Not documented)
  # 
  # @method cairo_device_flush(device)
  # @param [CairoDevice] device 
  # @return [nil] 
  # @scope class
  attach_function :cairo_device_flush, :cairo_device_flush, [CairoDevice], :void
  
  # (Not documented)
  # 
  # @method cairo_device_finish(device)
  # @param [CairoDevice] device 
  # @return [nil] 
  # @scope class
  attach_function :cairo_device_finish, :cairo_device_finish, [CairoDevice], :void
  
  # (Not documented)
  # 
  # @method cairo_device_destroy(device)
  # @param [CairoDevice] device 
  # @return [nil] 
  # @scope class
  attach_function :cairo_device_destroy, :cairo_device_destroy, [CairoDevice], :void
  
  # (Not documented)
  # 
  # @method cairo_device_get_reference_count(device)
  # @param [CairoDevice] device 
  # @return [Integer] 
  # @scope class
  attach_function :cairo_device_get_reference_count, :cairo_device_get_reference_count, [CairoDevice], :uint
  
  # (Not documented)
  # 
  # @method cairo_device_get_user_data(device, key)
  # @param [CairoDevice] device 
  # @param [CairoUserDataKey] key 
  # @return [FFI::Pointer(*Void)] 
  # @scope class
  attach_function :cairo_device_get_user_data, :cairo_device_get_user_data, [CairoDevice, CairoUserDataKey], :pointer
  
  # (Not documented)
  # 
  # @method cairo_device_set_user_data(device, key, user_data, destroy)
  # @param [CairoDevice] device 
  # @param [CairoUserDataKey] key 
  # @param [FFI::Pointer(*Void)] user_data 
  # @param [FFI::Pointer(CairoDestroyFuncT)] destroy 
  # @return [Symbol from _enum_cairo_status_] 
  # @scope class
  attach_function :cairo_device_set_user_data, :cairo_device_set_user_data, [CairoDevice, CairoUserDataKey, :pointer, :pointer], :cairo_status
  
  # (Not documented)
  # 
  # @method cairo_surface_create_similar(other, content, width, height)
  # @param [CairoSurface] other 
  # @param [Symbol from _enum_cairo_content_] content 
  # @param [Integer] width 
  # @param [Integer] height 
  # @return [CairoSurface] 
  # @scope class
  attach_function :cairo_surface_create_similar, :cairo_surface_create_similar, [CairoSurface, :cairo_content, :int, :int], CairoSurface
  
  # (Not documented)
  # 
  # @method cairo_surface_create_for_rectangle(target, x, y, width, height)
  # @param [CairoSurface] target 
  # @param [Float] x 
  # @param [Float] y 
  # @param [Float] width 
  # @param [Float] height 
  # @return [CairoSurface] 
  # @scope class
  attach_function :cairo_surface_create_for_rectangle, :cairo_surface_create_for_rectangle, [CairoSurface, :double, :double, :double, :double], CairoSurface
  
  # (Not documented)
  # 
  # @method cairo_surface_reference(surface)
  # @param [CairoSurface] surface 
  # @return [CairoSurface] 
  # @scope class
  attach_function :cairo_surface_reference, :cairo_surface_reference, [CairoSurface], CairoSurface
  
  # (Not documented)
  # 
  # @method cairo_surface_finish(surface)
  # @param [CairoSurface] surface 
  # @return [nil] 
  # @scope class
  attach_function :cairo_surface_finish, :cairo_surface_finish, [CairoSurface], :void
  
  # (Not documented)
  # 
  # @method cairo_surface_destroy(surface)
  # @param [CairoSurface] surface 
  # @return [nil] 
  # @scope class
  attach_function :cairo_surface_destroy, :cairo_surface_destroy, [CairoSurface], :void
  
  # (Not documented)
  # 
  # @method cairo_surface_get_device(surface)
  # @param [CairoSurface] surface 
  # @return [CairoDevice] 
  # @scope class
  attach_function :cairo_surface_get_device, :cairo_surface_get_device, [CairoSurface], CairoDevice
  
  # (Not documented)
  # 
  # @method cairo_surface_get_reference_count(surface)
  # @param [CairoSurface] surface 
  # @return [Integer] 
  # @scope class
  attach_function :cairo_surface_get_reference_count, :cairo_surface_get_reference_count, [CairoSurface], :uint
  
  # (Not documented)
  # 
  # @method cairo_surface_status(surface)
  # @param [CairoSurface] surface 
  # @return [Symbol from _enum_cairo_status_] 
  # @scope class
  attach_function :cairo_surface_status, :cairo_surface_status, [CairoSurface], :cairo_status
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_surface_type).</em>
  # 
  # === Options:
  # :image ::
  #   
  # :pdf ::
  #   
  # :ps ::
  #   
  # :xlib ::
  #   
  # :xcb ::
  #   
  # :glitz ::
  #   
  # :quartz ::
  #   
  # :win32 ::
  #   
  # :beos ::
  #   
  # :directfb ::
  #   
  # :svg ::
  #   
  # :os2 ::
  #   
  # :win32_printing ::
  #   
  # :quartz_image ::
  #   
  # :script ::
  #   
  # :qt ::
  #   
  # :recording ::
  #   
  # :vg ::
  #   
  # :gl ::
  #   
  # :drm ::
  #   
  # :tee ::
  #   
  # :xml ::
  #   
  # :skia ::
  #   
  # :subsurface ::
  #   
  # 
  # @method _enum_cairo_surface_type_
  # @return [Symbol]
  # @scope class
  enum :cairo_surface_type, [
    :image, 0,
    :pdf, 1,
    :ps, 2,
    :xlib, 3,
    :xcb, 4,
    :glitz, 5,
    :quartz, 6,
    :win32, 7,
    :beos, 8,
    :directfb, 9,
    :svg, 10,
    :os2, 11,
    :win32_printing, 12,
    :quartz_image, 13,
    :script, 14,
    :qt, 15,
    :recording, 16,
    :vg, 17,
    :gl, 18,
    :drm, 19,
    :tee, 20,
    :xml, 21,
    :skia, 22,
    :subsurface, 23
  ]
  
  # (Not documented)
  # 
  # @method cairo_surface_get_type(surface)
  # @param [CairoSurface] surface 
  # @return [Symbol from _enum_cairo_surface_type_] 
  # @scope class
  attach_function :cairo_surface_get_type, :cairo_surface_get_type, [CairoSurface], :cairo_surface_type
  
  # (Not documented)
  # 
  # @method cairo_surface_get_content(surface)
  # @param [CairoSurface] surface 
  # @return [Symbol from _enum_cairo_content_] 
  # @scope class
  attach_function :cairo_surface_get_content, :cairo_surface_get_content, [CairoSurface], :cairo_content
  
  # (Not documented)
  # 
  # @method cairo_surface_write_to_png(surface, filename)
  # @param [CairoSurface] surface 
  # @param [String] filename 
  # @return [Symbol from _enum_cairo_status_] 
  # @scope class
  attach_function :cairo_surface_write_to_png, :cairo_surface_write_to_png, [CairoSurface, :string], :cairo_status
  
  # (Not documented)
  # 
  # @method cairo_surface_write_to_png_stream(surface, write_func, closure)
  # @param [CairoSurface] surface 
  # @param [Proc(_callback_cairo_write_func_t_)] write_func 
  # @param [FFI::Pointer(*Void)] closure 
  # @return [Symbol from _enum_cairo_status_] 
  # @scope class
  attach_function :cairo_surface_write_to_png_stream, :cairo_surface_write_to_png_stream, [CairoSurface, :cairo_write_func_t, :pointer], :cairo_status
  
  # (Not documented)
  # 
  # @method cairo_surface_get_user_data(surface, key)
  # @param [CairoSurface] surface 
  # @param [CairoUserDataKey] key 
  # @return [FFI::Pointer(*Void)] 
  # @scope class
  attach_function :cairo_surface_get_user_data, :cairo_surface_get_user_data, [CairoSurface, CairoUserDataKey], :pointer
  
  # (Not documented)
  # 
  # @method cairo_surface_set_user_data(surface, key, user_data, destroy)
  # @param [CairoSurface] surface 
  # @param [CairoUserDataKey] key 
  # @param [FFI::Pointer(*Void)] user_data 
  # @param [FFI::Pointer(CairoDestroyFuncT)] destroy 
  # @return [Symbol from _enum_cairo_status_] 
  # @scope class
  attach_function :cairo_surface_set_user_data, :cairo_surface_set_user_data, [CairoSurface, CairoUserDataKey, :pointer, :pointer], :cairo_status
  
  # (Not documented)
  # 
  # @method cairo_surface_get_mime_data(surface, mime_type, data, length)
  # @param [CairoSurface] surface 
  # @param [String] mime_type 
  # @param [FFI::Pointer(**UChar)] data 
  # @param [FFI::Pointer(*ULong)] length 
  # @return [nil] 
  # @scope class
  attach_function :cairo_surface_get_mime_data, :cairo_surface_get_mime_data, [CairoSurface, :string, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method cairo_surface_set_mime_data(surface, mime_type, data, length, destroy, closure)
  # @param [CairoSurface] surface 
  # @param [String] mime_type 
  # @param [FFI::Pointer(*UChar)] data 
  # @param [Integer] length 
  # @param [FFI::Pointer(CairoDestroyFuncT)] destroy 
  # @param [FFI::Pointer(*Void)] closure 
  # @return [Symbol from _enum_cairo_status_] 
  # @scope class
  attach_function :cairo_surface_set_mime_data, :cairo_surface_set_mime_data, [CairoSurface, :string, :pointer, :ulong, :pointer, :pointer], :cairo_status
  
  # (Not documented)
  # 
  # @method cairo_surface_get_font_options(surface, options)
  # @param [CairoSurface] surface 
  # @param [CairoFontOptions] options 
  # @return [nil] 
  # @scope class
  attach_function :cairo_surface_get_font_options, :cairo_surface_get_font_options, [CairoSurface, CairoFontOptions], :void
  
  # (Not documented)
  # 
  # @method cairo_surface_flush(surface)
  # @param [CairoSurface] surface 
  # @return [nil] 
  # @scope class
  attach_function :cairo_surface_flush, :cairo_surface_flush, [CairoSurface], :void
  
  # (Not documented)
  # 
  # @method cairo_surface_mark_dirty(surface)
  # @param [CairoSurface] surface 
  # @return [nil] 
  # @scope class
  attach_function :cairo_surface_mark_dirty, :cairo_surface_mark_dirty, [CairoSurface], :void
  
  # (Not documented)
  # 
  # @method cairo_surface_mark_dirty_rectangle(surface, x, y, width, height)
  # @param [CairoSurface] surface 
  # @param [Integer] x 
  # @param [Integer] y 
  # @param [Integer] width 
  # @param [Integer] height 
  # @return [nil] 
  # @scope class
  attach_function :cairo_surface_mark_dirty_rectangle, :cairo_surface_mark_dirty_rectangle, [CairoSurface, :int, :int, :int, :int], :void
  
  # (Not documented)
  # 
  # @method cairo_surface_set_device_offset(surface, x_offset, y_offset)
  # @param [CairoSurface] surface 
  # @param [Float] x_offset 
  # @param [Float] y_offset 
  # @return [nil] 
  # @scope class
  attach_function :cairo_surface_set_device_offset, :cairo_surface_set_device_offset, [CairoSurface, :double, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_surface_get_device_offset(surface, x_offset, y_offset)
  # @param [CairoSurface] surface 
  # @param [FFI::Pointer(*Double)] x_offset 
  # @param [FFI::Pointer(*Double)] y_offset 
  # @return [nil] 
  # @scope class
  attach_function :cairo_surface_get_device_offset, :cairo_surface_get_device_offset, [CairoSurface, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method cairo_surface_set_fallback_resolution(surface, x_pixels_per_inch, y_pixels_per_inch)
  # @param [CairoSurface] surface 
  # @param [Float] x_pixels_per_inch 
  # @param [Float] y_pixels_per_inch 
  # @return [nil] 
  # @scope class
  attach_function :cairo_surface_set_fallback_resolution, :cairo_surface_set_fallback_resolution, [CairoSurface, :double, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_surface_get_fallback_resolution(surface, x_pixels_per_inch, y_pixels_per_inch)
  # @param [CairoSurface] surface 
  # @param [FFI::Pointer(*Double)] x_pixels_per_inch 
  # @param [FFI::Pointer(*Double)] y_pixels_per_inch 
  # @return [nil] 
  # @scope class
  attach_function :cairo_surface_get_fallback_resolution, :cairo_surface_get_fallback_resolution, [CairoSurface, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method cairo_surface_copy_page(surface)
  # @param [CairoSurface] surface 
  # @return [nil] 
  # @scope class
  attach_function :cairo_surface_copy_page, :cairo_surface_copy_page, [CairoSurface], :void
  
  # (Not documented)
  # 
  # @method cairo_surface_show_page(surface)
  # @param [CairoSurface] surface 
  # @return [nil] 
  # @scope class
  attach_function :cairo_surface_show_page, :cairo_surface_show_page, [CairoSurface], :void
  
  # (Not documented)
  # 
  # @method cairo_surface_has_show_text_glyphs(surface)
  # @param [CairoSurface] surface 
  # @return [Integer] 
  # @scope class
  attach_function :cairo_surface_has_show_text_glyphs, :cairo_surface_has_show_text_glyphs, [CairoSurface], :int
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_format).</em>
  # 
  # === Options:
  # :invalid ::
  #   
  # :argb32 ::
  #   
  # :rgb24 ::
  #   
  # :a8 ::
  #   
  # :a1 ::
  #   
  # :rgb16_565 ::
  #   
  # 
  # @method _enum_cairo_format_
  # @return [Symbol]
  # @scope class
  enum :cairo_format, [
    :invalid, -1,
    :argb32, 0,
    :rgb24, 1,
    :a8, 2,
    :a1, 3,
    :rgb16_565, 4
  ]
  
  # (Not documented)
  # 
  # @method cairo_image_surface_create(format, width, height)
  # @param [Symbol from _enum_cairo_format_] format 
  # @param [Integer] width 
  # @param [Integer] height 
  # @return [CairoSurface] 
  # @scope class
  attach_function :cairo_image_surface_create, :cairo_image_surface_create, [:cairo_format, :int, :int], CairoSurface
  
  # (Not documented)
  # 
  # @method cairo_format_stride_for_width(format, width)
  # @param [Symbol from _enum_cairo_format_] format 
  # @param [Integer] width 
  # @return [Integer] 
  # @scope class
  attach_function :cairo_format_stride_for_width, :cairo_format_stride_for_width, [:cairo_format, :int], :int
  
  # (Not documented)
  # 
  # @method cairo_image_surface_create_for_data(data, format, width, height, stride)
  # @param [FFI::Pointer(*UChar)] data 
  # @param [Symbol from _enum_cairo_format_] format 
  # @param [Integer] width 
  # @param [Integer] height 
  # @param [Integer] stride 
  # @return [CairoSurface] 
  # @scope class
  attach_function :cairo_image_surface_create_for_data, :cairo_image_surface_create_for_data, [:pointer, :cairo_format, :int, :int, :int], CairoSurface
  
  # (Not documented)
  # 
  # @method cairo_image_surface_get_data(surface)
  # @param [CairoSurface] surface 
  # @return [FFI::Pointer(*UChar)] 
  # @scope class
  attach_function :cairo_image_surface_get_data, :cairo_image_surface_get_data, [CairoSurface], :pointer
  
  # (Not documented)
  # 
  # @method cairo_image_surface_get_format(surface)
  # @param [CairoSurface] surface 
  # @return [Symbol from _enum_cairo_format_] 
  # @scope class
  attach_function :cairo_image_surface_get_format, :cairo_image_surface_get_format, [CairoSurface], :cairo_format
  
  # (Not documented)
  # 
  # @method cairo_image_surface_get_width(surface)
  # @param [CairoSurface] surface 
  # @return [Integer] 
  # @scope class
  attach_function :cairo_image_surface_get_width, :cairo_image_surface_get_width, [CairoSurface], :int
  
  # (Not documented)
  # 
  # @method cairo_image_surface_get_height(surface)
  # @param [CairoSurface] surface 
  # @return [Integer] 
  # @scope class
  attach_function :cairo_image_surface_get_height, :cairo_image_surface_get_height, [CairoSurface], :int
  
  # (Not documented)
  # 
  # @method cairo_image_surface_get_stride(surface)
  # @param [CairoSurface] surface 
  # @return [Integer] 
  # @scope class
  attach_function :cairo_image_surface_get_stride, :cairo_image_surface_get_stride, [CairoSurface], :int
  
  # (Not documented)
  # 
  # @method cairo_image_surface_create_from_png(filename)
  # @param [String] filename 
  # @return [CairoSurface] 
  # @scope class
  attach_function :cairo_image_surface_create_from_png, :cairo_image_surface_create_from_png, [:string], CairoSurface
  
  # (Not documented)
  # 
  # @method cairo_image_surface_create_from_png_stream(read_func, closure)
  # @param [Proc(_callback_cairo_read_func_t_)] read_func 
  # @param [FFI::Pointer(*Void)] closure 
  # @return [CairoSurface] 
  # @scope class
  attach_function :cairo_image_surface_create_from_png_stream, :cairo_image_surface_create_from_png_stream, [:cairo_read_func_t, :pointer], CairoSurface
  
  # (Not documented)
  # 
  # @method cairo_recording_surface_create(content, extents)
  # @param [Symbol from _enum_cairo_content_] content 
  # @param [CairoRectangle] extents 
  # @return [CairoSurface] 
  # @scope class
  attach_function :cairo_recording_surface_create, :cairo_recording_surface_create, [:cairo_content, CairoRectangle], CairoSurface
  
  # (Not documented)
  # 
  # @method cairo_recording_surface_ink_extents(surface, x0, y0, width, height)
  # @param [CairoSurface] surface 
  # @param [FFI::Pointer(*Double)] x0 
  # @param [FFI::Pointer(*Double)] y0 
  # @param [FFI::Pointer(*Double)] width 
  # @param [FFI::Pointer(*Double)] height 
  # @return [nil] 
  # @scope class
  attach_function :cairo_recording_surface_ink_extents, :cairo_recording_surface_ink_extents, [CairoSurface, :pointer, :pointer, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method cairo_pattern_create_rgb(red, green, blue)
  # @param [Float] red 
  # @param [Float] green 
  # @param [Float] blue 
  # @return [CairoPattern] 
  # @scope class
  attach_function :cairo_pattern_create_rgb, :cairo_pattern_create_rgb, [:double, :double, :double], CairoPattern
  
  # (Not documented)
  # 
  # @method cairo_pattern_create_rgba(red, green, blue, alpha)
  # @param [Float] red 
  # @param [Float] green 
  # @param [Float] blue 
  # @param [Float] alpha 
  # @return [CairoPattern] 
  # @scope class
  attach_function :cairo_pattern_create_rgba, :cairo_pattern_create_rgba, [:double, :double, :double, :double], CairoPattern
  
  # (Not documented)
  # 
  # @method cairo_pattern_create_for_surface(surface)
  # @param [CairoSurface] surface 
  # @return [CairoPattern] 
  # @scope class
  attach_function :cairo_pattern_create_for_surface, :cairo_pattern_create_for_surface, [CairoSurface], CairoPattern
  
  # (Not documented)
  # 
  # @method cairo_pattern_create_linear(x0, y0, x1, y1)
  # @param [Float] x0 
  # @param [Float] y0 
  # @param [Float] x1 
  # @param [Float] y1 
  # @return [CairoPattern] 
  # @scope class
  attach_function :cairo_pattern_create_linear, :cairo_pattern_create_linear, [:double, :double, :double, :double], CairoPattern
  
  # (Not documented)
  # 
  # @method cairo_pattern_create_radial(cx0, cy0, radius0, cx1, cy1, radius1)
  # @param [Float] cx0 
  # @param [Float] cy0 
  # @param [Float] radius0 
  # @param [Float] cx1 
  # @param [Float] cy1 
  # @param [Float] radius1 
  # @return [CairoPattern] 
  # @scope class
  attach_function :cairo_pattern_create_radial, :cairo_pattern_create_radial, [:double, :double, :double, :double, :double, :double], CairoPattern
  
  # (Not documented)
  # 
  # @method cairo_pattern_reference(pattern)
  # @param [CairoPattern] pattern 
  # @return [CairoPattern] 
  # @scope class
  attach_function :cairo_pattern_reference, :cairo_pattern_reference, [CairoPattern], CairoPattern
  
  # (Not documented)
  # 
  # @method cairo_pattern_destroy(pattern)
  # @param [CairoPattern] pattern 
  # @return [nil] 
  # @scope class
  attach_function :cairo_pattern_destroy, :cairo_pattern_destroy, [CairoPattern], :void
  
  # (Not documented)
  # 
  # @method cairo_pattern_get_reference_count(pattern)
  # @param [CairoPattern] pattern 
  # @return [Integer] 
  # @scope class
  attach_function :cairo_pattern_get_reference_count, :cairo_pattern_get_reference_count, [CairoPattern], :uint
  
  # (Not documented)
  # 
  # @method cairo_pattern_status(pattern)
  # @param [CairoPattern] pattern 
  # @return [Symbol from _enum_cairo_status_] 
  # @scope class
  attach_function :cairo_pattern_status, :cairo_pattern_status, [CairoPattern], :cairo_status
  
  # (Not documented)
  # 
  # @method cairo_pattern_get_user_data(pattern, key)
  # @param [CairoPattern] pattern 
  # @param [CairoUserDataKey] key 
  # @return [FFI::Pointer(*Void)] 
  # @scope class
  attach_function :cairo_pattern_get_user_data, :cairo_pattern_get_user_data, [CairoPattern, CairoUserDataKey], :pointer
  
  # (Not documented)
  # 
  # @method cairo_pattern_set_user_data(pattern, key, user_data, destroy)
  # @param [CairoPattern] pattern 
  # @param [CairoUserDataKey] key 
  # @param [FFI::Pointer(*Void)] user_data 
  # @param [FFI::Pointer(CairoDestroyFuncT)] destroy 
  # @return [Symbol from _enum_cairo_status_] 
  # @scope class
  attach_function :cairo_pattern_set_user_data, :cairo_pattern_set_user_data, [CairoPattern, CairoUserDataKey, :pointer, :pointer], :cairo_status
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_pattern_type).</em>
  # 
  # === Options:
  # :solid ::
  #   
  # :surface ::
  #   
  # :linear ::
  #   
  # :radial ::
  #   
  # 
  # @method _enum_cairo_pattern_type_
  # @return [Symbol]
  # @scope class
  enum :cairo_pattern_type, [
    :solid, 0,
    :surface, 1,
    :linear, 2,
    :radial, 3
  ]
  
  # (Not documented)
  # 
  # @method cairo_pattern_get_type(pattern)
  # @param [CairoPattern] pattern 
  # @return [Symbol from _enum_cairo_pattern_type_] 
  # @scope class
  attach_function :cairo_pattern_get_type, :cairo_pattern_get_type, [CairoPattern], :cairo_pattern_type
  
  # (Not documented)
  # 
  # @method cairo_pattern_add_color_stop_rgb(pattern, offset, red, green, blue)
  # @param [CairoPattern] pattern 
  # @param [Float] offset 
  # @param [Float] red 
  # @param [Float] green 
  # @param [Float] blue 
  # @return [nil] 
  # @scope class
  attach_function :cairo_pattern_add_color_stop_rgb, :cairo_pattern_add_color_stop_rgb, [CairoPattern, :double, :double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_pattern_add_color_stop_rgba(pattern, offset, red, green, blue, alpha)
  # @param [CairoPattern] pattern 
  # @param [Float] offset 
  # @param [Float] red 
  # @param [Float] green 
  # @param [Float] blue 
  # @param [Float] alpha 
  # @return [nil] 
  # @scope class
  attach_function :cairo_pattern_add_color_stop_rgba, :cairo_pattern_add_color_stop_rgba, [CairoPattern, :double, :double, :double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_pattern_set_matrix(pattern, matrix)
  # @param [CairoPattern] pattern 
  # @param [CairoMatrix] matrix 
  # @return [nil] 
  # @scope class
  attach_function :cairo_pattern_set_matrix, :cairo_pattern_set_matrix, [CairoPattern, CairoMatrix], :void
  
  # (Not documented)
  # 
  # @method cairo_pattern_get_matrix(pattern, matrix)
  # @param [CairoPattern] pattern 
  # @param [CairoMatrix] matrix 
  # @return [nil] 
  # @scope class
  attach_function :cairo_pattern_get_matrix, :cairo_pattern_get_matrix, [CairoPattern, CairoMatrix], :void
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_extend).</em>
  # 
  # === Options:
  # :none ::
  #   
  # :repeat ::
  #   
  # :reflect ::
  #   
  # :pad ::
  #   
  # 
  # @method _enum_cairo_extend_
  # @return [Symbol]
  # @scope class
  enum :cairo_extend, [
    :none, 0,
    :repeat, 1,
    :reflect, 2,
    :pad, 3
  ]
  
  # (Not documented)
  # 
  # @method cairo_pattern_set_extend(pattern, extend)
  # @param [CairoPattern] pattern 
  # @param [Symbol from _enum_cairo_extend_] extend 
  # @return [nil] 
  # @scope class
  attach_function :cairo_pattern_set_extend, :cairo_pattern_set_extend, [CairoPattern, :cairo_extend], :void
  
  # (Not documented)
  # 
  # @method cairo_pattern_get_extend(pattern)
  # @param [CairoPattern] pattern 
  # @return [Symbol from _enum_cairo_extend_] 
  # @scope class
  attach_function :cairo_pattern_get_extend, :cairo_pattern_get_extend, [CairoPattern], :cairo_extend
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_filter).</em>
  # 
  # === Options:
  # :fast ::
  #   
  # :good ::
  #   
  # :best ::
  #   
  # :nearest ::
  #   
  # :bilinear ::
  #   
  # :gaussian ::
  #   
  # 
  # @method _enum_cairo_filter_
  # @return [Symbol]
  # @scope class
  enum :cairo_filter, [
    :fast, 0,
    :good, 1,
    :best, 2,
    :nearest, 3,
    :bilinear, 4,
    :gaussian, 5
  ]
  
  # (Not documented)
  # 
  # @method cairo_pattern_set_filter(pattern, filter)
  # @param [CairoPattern] pattern 
  # @param [Symbol from _enum_cairo_filter_] filter 
  # @return [nil] 
  # @scope class
  attach_function :cairo_pattern_set_filter, :cairo_pattern_set_filter, [CairoPattern, :cairo_filter], :void
  
  # (Not documented)
  # 
  # @method cairo_pattern_get_filter(pattern)
  # @param [CairoPattern] pattern 
  # @return [Symbol from _enum_cairo_filter_] 
  # @scope class
  attach_function :cairo_pattern_get_filter, :cairo_pattern_get_filter, [CairoPattern], :cairo_filter
  
  # (Not documented)
  # 
  # @method cairo_pattern_get_rgba(pattern, red, green, blue, alpha)
  # @param [CairoPattern] pattern 
  # @param [FFI::Pointer(*Double)] red 
  # @param [FFI::Pointer(*Double)] green 
  # @param [FFI::Pointer(*Double)] blue 
  # @param [FFI::Pointer(*Double)] alpha 
  # @return [Symbol from _enum_cairo_status_] 
  # @scope class
  attach_function :cairo_pattern_get_rgba, :cairo_pattern_get_rgba, [CairoPattern, :pointer, :pointer, :pointer, :pointer], :cairo_status
  
  # (Not documented)
  # 
  # @method cairo_pattern_get_surface(pattern, surface)
  # @param [CairoPattern] pattern 
  # @param [FFI::Pointer(**CairoSurfaceT)] surface 
  # @return [Symbol from _enum_cairo_status_] 
  # @scope class
  attach_function :cairo_pattern_get_surface, :cairo_pattern_get_surface, [CairoPattern, :pointer], :cairo_status
  
  # (Not documented)
  # 
  # @method cairo_pattern_get_color_stop_rgba(pattern, index, offset, red, green, blue, alpha)
  # @param [CairoPattern] pattern 
  # @param [Integer] index 
  # @param [FFI::Pointer(*Double)] offset 
  # @param [FFI::Pointer(*Double)] red 
  # @param [FFI::Pointer(*Double)] green 
  # @param [FFI::Pointer(*Double)] blue 
  # @param [FFI::Pointer(*Double)] alpha 
  # @return [Symbol from _enum_cairo_status_] 
  # @scope class
  attach_function :cairo_pattern_get_color_stop_rgba, :cairo_pattern_get_color_stop_rgba, [CairoPattern, :int, :pointer, :pointer, :pointer, :pointer, :pointer], :cairo_status
  
  # (Not documented)
  # 
  # @method cairo_pattern_get_color_stop_count(pattern, count)
  # @param [CairoPattern] pattern 
  # @param [FFI::Pointer(*Int)] count 
  # @return [Symbol from _enum_cairo_status_] 
  # @scope class
  attach_function :cairo_pattern_get_color_stop_count, :cairo_pattern_get_color_stop_count, [CairoPattern, :pointer], :cairo_status
  
  # (Not documented)
  # 
  # @method cairo_pattern_get_linear_points(pattern, x0, y0, x1, y1)
  # @param [CairoPattern] pattern 
  # @param [FFI::Pointer(*Double)] x0 
  # @param [FFI::Pointer(*Double)] y0 
  # @param [FFI::Pointer(*Double)] x1 
  # @param [FFI::Pointer(*Double)] y1 
  # @return [Symbol from _enum_cairo_status_] 
  # @scope class
  attach_function :cairo_pattern_get_linear_points, :cairo_pattern_get_linear_points, [CairoPattern, :pointer, :pointer, :pointer, :pointer], :cairo_status
  
  # (Not documented)
  # 
  # @method cairo_pattern_get_radial_circles(pattern, x0, y0, r0, x1, y1, r1)
  # @param [CairoPattern] pattern 
  # @param [FFI::Pointer(*Double)] x0 
  # @param [FFI::Pointer(*Double)] y0 
  # @param [FFI::Pointer(*Double)] r0 
  # @param [FFI::Pointer(*Double)] x1 
  # @param [FFI::Pointer(*Double)] y1 
  # @param [FFI::Pointer(*Double)] r1 
  # @return [Symbol from _enum_cairo_status_] 
  # @scope class
  attach_function :cairo_pattern_get_radial_circles, :cairo_pattern_get_radial_circles, [CairoPattern, :pointer, :pointer, :pointer, :pointer, :pointer, :pointer], :cairo_status
  
  # (Not documented)
  # 
  # @method cairo_matrix_init(matrix, xx, yx, xy, yy, x0, y0)
  # @param [CairoMatrix] matrix 
  # @param [Float] xx 
  # @param [Float] yx 
  # @param [Float] xy 
  # @param [Float] yy 
  # @param [Float] x0 
  # @param [Float] y0 
  # @return [nil] 
  # @scope class
  attach_function :cairo_matrix_init, :cairo_matrix_init, [CairoMatrix, :double, :double, :double, :double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_matrix_init_identity(matrix)
  # @param [CairoMatrix] matrix 
  # @return [nil] 
  # @scope class
  attach_function :cairo_matrix_init_identity, :cairo_matrix_init_identity, [CairoMatrix], :void
  
  # (Not documented)
  # 
  # @method cairo_matrix_init_translate(matrix, tx, ty)
  # @param [CairoMatrix] matrix 
  # @param [Float] tx 
  # @param [Float] ty 
  # @return [nil] 
  # @scope class
  attach_function :cairo_matrix_init_translate, :cairo_matrix_init_translate, [CairoMatrix, :double, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_matrix_init_scale(matrix, sx, sy)
  # @param [CairoMatrix] matrix 
  # @param [Float] sx 
  # @param [Float] sy 
  # @return [nil] 
  # @scope class
  attach_function :cairo_matrix_init_scale, :cairo_matrix_init_scale, [CairoMatrix, :double, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_matrix_init_rotate(matrix, radians)
  # @param [CairoMatrix] matrix 
  # @param [Float] radians 
  # @return [nil] 
  # @scope class
  attach_function :cairo_matrix_init_rotate, :cairo_matrix_init_rotate, [CairoMatrix, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_matrix_translate(matrix, tx, ty)
  # @param [CairoMatrix] matrix 
  # @param [Float] tx 
  # @param [Float] ty 
  # @return [nil] 
  # @scope class
  attach_function :cairo_matrix_translate, :cairo_matrix_translate, [CairoMatrix, :double, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_matrix_scale(matrix, sx, sy)
  # @param [CairoMatrix] matrix 
  # @param [Float] sx 
  # @param [Float] sy 
  # @return [nil] 
  # @scope class
  attach_function :cairo_matrix_scale, :cairo_matrix_scale, [CairoMatrix, :double, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_matrix_rotate(matrix, radians)
  # @param [CairoMatrix] matrix 
  # @param [Float] radians 
  # @return [nil] 
  # @scope class
  attach_function :cairo_matrix_rotate, :cairo_matrix_rotate, [CairoMatrix, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_matrix_invert(matrix)
  # @param [CairoMatrix] matrix 
  # @return [Symbol from _enum_cairo_status_] 
  # @scope class
  attach_function :cairo_matrix_invert, :cairo_matrix_invert, [CairoMatrix], :cairo_status
  
  # (Not documented)
  # 
  # @method cairo_matrix_multiply(result, a, b)
  # @param [CairoMatrix] result 
  # @param [CairoMatrix] a 
  # @param [CairoMatrix] b 
  # @return [nil] 
  # @scope class
  attach_function :cairo_matrix_multiply, :cairo_matrix_multiply, [CairoMatrix, CairoMatrix, CairoMatrix], :void
  
  # (Not documented)
  # 
  # @method cairo_matrix_transform_distance(matrix, dx, dy)
  # @param [CairoMatrix] matrix 
  # @param [FFI::Pointer(*Double)] dx 
  # @param [FFI::Pointer(*Double)] dy 
  # @return [nil] 
  # @scope class
  attach_function :cairo_matrix_transform_distance, :cairo_matrix_transform_distance, [CairoMatrix, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method cairo_matrix_transform_point(matrix, x, y)
  # @param [CairoMatrix] matrix 
  # @param [FFI::Pointer(*Double)] x 
  # @param [FFI::Pointer(*Double)] y 
  # @return [nil] 
  # @scope class
  attach_function :cairo_matrix_transform_point, :cairo_matrix_transform_point, [CairoMatrix, :pointer, :pointer], :void
  
  # (Not documented)
  module CairoRegionWrappers
    # @return [CairoRegion] 
    def copy()
      CairoRegion.new Cairo.cairo_region_copy(self)
    end
    
    # @return [CairoRegion] 
    def reference()
      CairoRegion.new Cairo.cairo_region_reference(self)
    end
    
    # @return [nil] 
    def destroy()
      Cairo.cairo_region_destroy(self)
    end
    
    # @param [FFI::Pointer(*CairoRegion)] b 
    # @return [Integer] 
    def equal(b)
      Cairo.cairo_region_equal(self, b)
    end
    
    # @return [Symbol from _enum_cairo_status_] 
    def status()
      Cairo.cairo_region_status(self)
    end
    
    # @param [FFI::Pointer(*CairoRectangleInt)] extents 
    # @return [nil] 
    def get_extents(extents)
      Cairo.cairo_region_get_extents(self, extents)
    end
    
    # @return [Integer] 
    def num_rectangles()
      Cairo.cairo_region_num_rectangles(self)
    end
    
    # @param [Integer] nth 
    # @param [FFI::Pointer(*CairoRectangleInt)] rectangle 
    # @return [nil] 
    def get_rectangle(nth, rectangle)
      Cairo.cairo_region_get_rectangle(self, nth, rectangle)
    end
    
    # @return [Integer] 
    def is_empty()
      Cairo.cairo_region_is_empty(self)
    end
    
    # @param [FFI::Pointer(*CairoRectangleInt)] rectangle 
    # @return [Symbol from _enum_cairo_region_overlap_] 
    def contains_rectangle(rectangle)
      Cairo.cairo_region_contains_rectangle(self, rectangle)
    end
    
    # @param [Integer] x 
    # @param [Integer] y 
    # @return [Integer] 
    def contains_point(x, y)
      Cairo.cairo_region_contains_point(self, x, y)
    end
    
    # @param [Integer] dx 
    # @param [Integer] dy 
    # @return [nil] 
    def translate(dx, dy)
      Cairo.cairo_region_translate(self, dx, dy)
    end
    
    # @param [FFI::Pointer(*CairoRegion)] other 
    # @return [Symbol from _enum_cairo_status_] 
    def subtract(other)
      Cairo.cairo_region_subtract(self, other)
    end
    
    # @param [FFI::Pointer(*CairoRectangleInt)] rectangle 
    # @return [Symbol from _enum_cairo_status_] 
    def subtract_rectangle(rectangle)
      Cairo.cairo_region_subtract_rectangle(self, rectangle)
    end
    
    # @param [FFI::Pointer(*CairoRegion)] other 
    # @return [Symbol from _enum_cairo_status_] 
    def intersect(other)
      Cairo.cairo_region_intersect(self, other)
    end
    
    # @param [FFI::Pointer(*CairoRectangleInt)] rectangle 
    # @return [Symbol from _enum_cairo_status_] 
    def intersect_rectangle(rectangle)
      Cairo.cairo_region_intersect_rectangle(self, rectangle)
    end
    
    # @param [FFI::Pointer(*CairoRegion)] other 
    # @return [Symbol from _enum_cairo_status_] 
    def union(other)
      Cairo.cairo_region_union(self, other)
    end
    
    # @param [FFI::Pointer(*CairoRectangleInt)] rectangle 
    # @return [Symbol from _enum_cairo_status_] 
    def union_rectangle(rectangle)
      Cairo.cairo_region_union_rectangle(self, rectangle)
    end
    
    # @param [FFI::Pointer(*CairoRegion)] other 
    # @return [Symbol from _enum_cairo_status_] 
    def xor(other)
      Cairo.cairo_region_xor(self, other)
    end
    
    # @param [FFI::Pointer(*CairoRectangleInt)] rectangle 
    # @return [Symbol from _enum_cairo_status_] 
    def xor_rectangle(rectangle)
      Cairo.cairo_region_xor_rectangle(self, rectangle)
    end
  end
  
  class CairoRegion < FFI::Struct
    include CairoRegionWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :x ::
  #   (Integer) 
  # :y ::
  #   (Integer) 
  # :width ::
  #   (Integer) 
  # :height ::
  #   (Integer) 
  class CairoRectangleInt < FFI::Struct
    layout :x, :int,
           :y, :int,
           :width, :int,
           :height, :int
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_region_overlap).</em>
  # 
  # === Options:
  # :in_ ::
  #   
  # :out ::
  #   completely inside region
  # :part ::
  #   completely outside region
  # 
  # @method _enum_cairo_region_overlap_
  # @return [Symbol]
  # @scope class
  enum :cairo_region_overlap, [
    :in_, 0,
    :out, 1,
    :part, 2
  ]
  
  # (Not documented)
  # 
  # @method cairo_region_create()
  # @return [CairoRegion] 
  # @scope class
  attach_function :cairo_region_create, :cairo_region_create, [], CairoRegion
  
  # (Not documented)
  # 
  # @method cairo_region_create_rectangle(rectangle)
  # @param [CairoRectangleInt] rectangle 
  # @return [CairoRegion] 
  # @scope class
  attach_function :cairo_region_create_rectangle, :cairo_region_create_rectangle, [CairoRectangleInt], CairoRegion
  
  # (Not documented)
  # 
  # @method cairo_region_create_rectangles(rects, count)
  # @param [CairoRectangleInt] rects 
  # @param [Integer] count 
  # @return [CairoRegion] 
  # @scope class
  attach_function :cairo_region_create_rectangles, :cairo_region_create_rectangles, [CairoRectangleInt, :int], CairoRegion
  
  # (Not documented)
  # 
  # @method cairo_region_copy(original)
  # @param [CairoRegion] original 
  # @return [CairoRegion] 
  # @scope class
  attach_function :cairo_region_copy, :cairo_region_copy, [CairoRegion], CairoRegion
  
  # (Not documented)
  # 
  # @method cairo_region_reference(region)
  # @param [CairoRegion] region 
  # @return [CairoRegion] 
  # @scope class
  attach_function :cairo_region_reference, :cairo_region_reference, [CairoRegion], CairoRegion
  
  # (Not documented)
  # 
  # @method cairo_region_destroy(region)
  # @param [CairoRegion] region 
  # @return [nil] 
  # @scope class
  attach_function :cairo_region_destroy, :cairo_region_destroy, [CairoRegion], :void
  
  # (Not documented)
  # 
  # @method cairo_region_equal(a, b)
  # @param [CairoRegion] a 
  # @param [CairoRegion] b 
  # @return [Integer] 
  # @scope class
  attach_function :cairo_region_equal, :cairo_region_equal, [CairoRegion, CairoRegion], :int
  
  # (Not documented)
  # 
  # @method cairo_region_status(region)
  # @param [CairoRegion] region 
  # @return [Symbol from _enum_cairo_status_] 
  # @scope class
  attach_function :cairo_region_status, :cairo_region_status, [CairoRegion], :cairo_status
  
  # (Not documented)
  # 
  # @method cairo_region_get_extents(region, extents)
  # @param [CairoRegion] region 
  # @param [CairoRectangleInt] extents 
  # @return [nil] 
  # @scope class
  attach_function :cairo_region_get_extents, :cairo_region_get_extents, [CairoRegion, CairoRectangleInt], :void
  
  # (Not documented)
  # 
  # @method cairo_region_num_rectangles(region)
  # @param [CairoRegion] region 
  # @return [Integer] 
  # @scope class
  attach_function :cairo_region_num_rectangles, :cairo_region_num_rectangles, [CairoRegion], :int
  
  # (Not documented)
  # 
  # @method cairo_region_get_rectangle(region, nth, rectangle)
  # @param [CairoRegion] region 
  # @param [Integer] nth 
  # @param [CairoRectangleInt] rectangle 
  # @return [nil] 
  # @scope class
  attach_function :cairo_region_get_rectangle, :cairo_region_get_rectangle, [CairoRegion, :int, CairoRectangleInt], :void
  
  # (Not documented)
  # 
  # @method cairo_region_is_empty(region)
  # @param [CairoRegion] region 
  # @return [Integer] 
  # @scope class
  attach_function :cairo_region_is_empty, :cairo_region_is_empty, [CairoRegion], :int
  
  # (Not documented)
  # 
  # @method cairo_region_contains_rectangle(region, rectangle)
  # @param [CairoRegion] region 
  # @param [CairoRectangleInt] rectangle 
  # @return [Symbol from _enum_cairo_region_overlap_] 
  # @scope class
  attach_function :cairo_region_contains_rectangle, :cairo_region_contains_rectangle, [CairoRegion, CairoRectangleInt], :cairo_region_overlap
  
  # (Not documented)
  # 
  # @method cairo_region_contains_point(region, x, y)
  # @param [CairoRegion] region 
  # @param [Integer] x 
  # @param [Integer] y 
  # @return [Integer] 
  # @scope class
  attach_function :cairo_region_contains_point, :cairo_region_contains_point, [CairoRegion, :int, :int], :int
  
  # (Not documented)
  # 
  # @method cairo_region_translate(region, dx, dy)
  # @param [CairoRegion] region 
  # @param [Integer] dx 
  # @param [Integer] dy 
  # @return [nil] 
  # @scope class
  attach_function :cairo_region_translate, :cairo_region_translate, [CairoRegion, :int, :int], :void
  
  # (Not documented)
  # 
  # @method cairo_region_subtract(dst, other)
  # @param [CairoRegion] dst 
  # @param [CairoRegion] other 
  # @return [Symbol from _enum_cairo_status_] 
  # @scope class
  attach_function :cairo_region_subtract, :cairo_region_subtract, [CairoRegion, CairoRegion], :cairo_status
  
  # (Not documented)
  # 
  # @method cairo_region_subtract_rectangle(dst, rectangle)
  # @param [CairoRegion] dst 
  # @param [CairoRectangleInt] rectangle 
  # @return [Symbol from _enum_cairo_status_] 
  # @scope class
  attach_function :cairo_region_subtract_rectangle, :cairo_region_subtract_rectangle, [CairoRegion, CairoRectangleInt], :cairo_status
  
  # (Not documented)
  # 
  # @method cairo_region_intersect(dst, other)
  # @param [CairoRegion] dst 
  # @param [CairoRegion] other 
  # @return [Symbol from _enum_cairo_status_] 
  # @scope class
  attach_function :cairo_region_intersect, :cairo_region_intersect, [CairoRegion, CairoRegion], :cairo_status
  
  # (Not documented)
  # 
  # @method cairo_region_intersect_rectangle(dst, rectangle)
  # @param [CairoRegion] dst 
  # @param [CairoRectangleInt] rectangle 
  # @return [Symbol from _enum_cairo_status_] 
  # @scope class
  attach_function :cairo_region_intersect_rectangle, :cairo_region_intersect_rectangle, [CairoRegion, CairoRectangleInt], :cairo_status
  
  # (Not documented)
  # 
  # @method cairo_region_union(dst, other)
  # @param [CairoRegion] dst 
  # @param [CairoRegion] other 
  # @return [Symbol from _enum_cairo_status_] 
  # @scope class
  attach_function :cairo_region_union, :cairo_region_union, [CairoRegion, CairoRegion], :cairo_status
  
  # (Not documented)
  # 
  # @method cairo_region_union_rectangle(dst, rectangle)
  # @param [CairoRegion] dst 
  # @param [CairoRectangleInt] rectangle 
  # @return [Symbol from _enum_cairo_status_] 
  # @scope class
  attach_function :cairo_region_union_rectangle, :cairo_region_union_rectangle, [CairoRegion, CairoRectangleInt], :cairo_status
  
  # (Not documented)
  # 
  # @method cairo_region_xor(dst, other)
  # @param [CairoRegion] dst 
  # @param [CairoRegion] other 
  # @return [Symbol from _enum_cairo_status_] 
  # @scope class
  attach_function :cairo_region_xor, :cairo_region_xor, [CairoRegion, CairoRegion], :cairo_status
  
  # (Not documented)
  # 
  # @method cairo_region_xor_rectangle(dst, rectangle)
  # @param [CairoRegion] dst 
  # @param [CairoRectangleInt] rectangle 
  # @return [Symbol from _enum_cairo_status_] 
  # @scope class
  attach_function :cairo_region_xor_rectangle, :cairo_region_xor_rectangle, [CairoRegion, CairoRectangleInt], :cairo_status
  
  # (Not documented)
  # 
  # @method cairo_debug_reset_static_data()
  # @return [nil] 
  # @scope class
  attach_function :cairo_debug_reset_static_data, :cairo_debug_reset_static_data, [], :void
  
  # (Not documented)
  # 
  # @method cairo_ft_font_face_create_for_ft_face(face, load_flags)
  # @param [FFI::Pointer(FTFace)] face 
  # @param [Integer] load_flags 
  # @return [CairoFontFace] 
  # @scope class
  attach_function :cairo_ft_font_face_create_for_ft_face, :cairo_ft_font_face_create_for_ft_face, [:pointer, :int], CairoFontFace
  
  # (Not documented)
  # 
  # @method cairo_ft_scaled_font_lock_face(scaled_font)
  # @param [CairoScaledFont] scaled_font 
  # @return [FFI::Pointer(FTFace)] 
  # @scope class
  attach_function :cairo_ft_scaled_font_lock_face, :cairo_ft_scaled_font_lock_face, [CairoScaledFont], :pointer
  
  # (Not documented)
  # 
  # @method cairo_ft_scaled_font_unlock_face(scaled_font)
  # @param [CairoScaledFont] scaled_font 
  # @return [nil] 
  # @scope class
  attach_function :cairo_ft_scaled_font_unlock_face, :cairo_ft_scaled_font_unlock_face, [CairoScaledFont], :void
  
  # (Not documented)
  # 
  # @method cairo_ft_font_face_create_for_pattern(pattern)
  # @param [FFI::Pointer(*FcPattern)] pattern 
  # @return [CairoFontFace] 
  # @scope class
  attach_function :cairo_ft_font_face_create_for_pattern, :cairo_ft_font_face_create_for_pattern, [:pointer], CairoFontFace
  
  # (Not documented)
  # 
  # @method cairo_ft_font_options_substitute(options, pattern)
  # @param [CairoFontOptions] options 
  # @param [FFI::Pointer(*FcPattern)] pattern 
  # @return [nil] 
  # @scope class
  attach_function :cairo_ft_font_options_substitute, :cairo_ft_font_options_substitute, [CairoFontOptions, :pointer], :void
  
  # (Not documented)
  # 
  # @method cairo_gobject_context_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :cairo_gobject_context_get_type, :cairo_gobject_context_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method cairo_gobject_device_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :cairo_gobject_device_get_type, :cairo_gobject_device_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method cairo_gobject_pattern_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :cairo_gobject_pattern_get_type, :cairo_gobject_pattern_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method cairo_gobject_surface_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :cairo_gobject_surface_get_type, :cairo_gobject_surface_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method cairo_gobject_rectangle_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :cairo_gobject_rectangle_get_type, :cairo_gobject_rectangle_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method cairo_gobject_scaled_font_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :cairo_gobject_scaled_font_get_type, :cairo_gobject_scaled_font_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method cairo_gobject_font_face_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :cairo_gobject_font_face_get_type, :cairo_gobject_font_face_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method cairo_gobject_font_options_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :cairo_gobject_font_options_get_type, :cairo_gobject_font_options_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method cairo_gobject_rectangle_int_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :cairo_gobject_rectangle_int_get_type, :cairo_gobject_rectangle_int_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method cairo_gobject_region_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :cairo_gobject_region_get_type, :cairo_gobject_region_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method cairo_gobject_status_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :cairo_gobject_status_get_type, :cairo_gobject_status_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method cairo_gobject_content_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :cairo_gobject_content_get_type, :cairo_gobject_content_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method cairo_gobject_operator_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :cairo_gobject_operator_get_type, :cairo_gobject_operator_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method cairo_gobject_antialias_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :cairo_gobject_antialias_get_type, :cairo_gobject_antialias_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method cairo_gobject_fill_rule_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :cairo_gobject_fill_rule_get_type, :cairo_gobject_fill_rule_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method cairo_gobject_line_cap_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :cairo_gobject_line_cap_get_type, :cairo_gobject_line_cap_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method cairo_gobject_line_join_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :cairo_gobject_line_join_get_type, :cairo_gobject_line_join_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method cairo_gobject_text_cluster_flags_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :cairo_gobject_text_cluster_flags_get_type, :cairo_gobject_text_cluster_flags_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method cairo_gobject_font_slant_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :cairo_gobject_font_slant_get_type, :cairo_gobject_font_slant_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method cairo_gobject_font_weight_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :cairo_gobject_font_weight_get_type, :cairo_gobject_font_weight_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method cairo_gobject_subpixel_order_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :cairo_gobject_subpixel_order_get_type, :cairo_gobject_subpixel_order_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method cairo_gobject_hint_style_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :cairo_gobject_hint_style_get_type, :cairo_gobject_hint_style_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method cairo_gobject_hint_metrics_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :cairo_gobject_hint_metrics_get_type, :cairo_gobject_hint_metrics_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method cairo_gobject_font_type_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :cairo_gobject_font_type_get_type, :cairo_gobject_font_type_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method cairo_gobject_path_data_type_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :cairo_gobject_path_data_type_get_type, :cairo_gobject_path_data_type_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method cairo_gobject_device_type_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :cairo_gobject_device_type_get_type, :cairo_gobject_device_type_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method cairo_gobject_surface_type_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :cairo_gobject_surface_type_get_type, :cairo_gobject_surface_type_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method cairo_gobject_format_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :cairo_gobject_format_get_type, :cairo_gobject_format_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method cairo_gobject_pattern_type_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :cairo_gobject_pattern_type_get_type, :cairo_gobject_pattern_type_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method cairo_gobject_extend_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :cairo_gobject_extend_get_type, :cairo_gobject_extend_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method cairo_gobject_filter_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :cairo_gobject_filter_get_type, :cairo_gobject_filter_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method cairo_gobject_region_overlap_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :cairo_gobject_region_overlap_get_type, :cairo_gobject_region_overlap_get_type, [], :uint
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_pdf_version).</em>
  # 
  # === Options:
  # :_1_4 ::
  #   
  # :_1_5 ::
  #   
  # 
  # @method _enum_cairo_pdf_version_
  # @return [Symbol]
  # @scope class
  enum :cairo_pdf_version, [
    :_1_4, 0,
    :_1_5, 1
  ]
  
  # (Not documented)
  # 
  # @method cairo_pdf_surface_create(filename, width_in_points, height_in_points)
  # @param [String] filename 
  # @param [Float] width_in_points 
  # @param [Float] height_in_points 
  # @return [CairoSurface] 
  # @scope class
  attach_function :cairo_pdf_surface_create, :cairo_pdf_surface_create, [:string, :double, :double], CairoSurface
  
  # (Not documented)
  # 
  # @method cairo_pdf_surface_create_for_stream(write_func, closure, width_in_points, height_in_points)
  # @param [Proc(_callback_cairo_write_func_t_)] write_func 
  # @param [FFI::Pointer(*Void)] closure 
  # @param [Float] width_in_points 
  # @param [Float] height_in_points 
  # @return [CairoSurface] 
  # @scope class
  attach_function :cairo_pdf_surface_create_for_stream, :cairo_pdf_surface_create_for_stream, [:cairo_write_func_t, :pointer, :double, :double], CairoSurface
  
  # (Not documented)
  # 
  # @method cairo_pdf_surface_restrict_to_version(surface, version)
  # @param [CairoSurface] surface 
  # @param [Symbol from _enum_cairo_pdf_version_] version 
  # @return [nil] 
  # @scope class
  attach_function :cairo_pdf_surface_restrict_to_version, :cairo_pdf_surface_restrict_to_version, [CairoSurface, :cairo_pdf_version], :void
  
  # (Not documented)
  # 
  # @method cairo_pdf_get_versions(versions, num_versions)
  # @param [FFI::Pointer(**CairoPdfVersionT)] versions 
  # @param [FFI::Pointer(*Int)] num_versions 
  # @return [nil] 
  # @scope class
  attach_function :cairo_pdf_get_versions, :cairo_pdf_get_versions, [:pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method cairo_pdf_version_to_string(version)
  # @param [Symbol from _enum_cairo_pdf_version_] version 
  # @return [String] 
  # @scope class
  attach_function :cairo_pdf_version_to_string, :cairo_pdf_version_to_string, [:cairo_pdf_version], :string
  
  # (Not documented)
  # 
  # @method cairo_pdf_surface_set_size(surface, width_in_points, height_in_points)
  # @param [CairoSurface] surface 
  # @param [Float] width_in_points 
  # @param [Float] height_in_points 
  # @return [nil] 
  # @scope class
  attach_function :cairo_pdf_surface_set_size, :cairo_pdf_surface_set_size, [CairoSurface, :double, :double], :void
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_ps_level).</em>
  # 
  # === Options:
  # :_2 ::
  #   
  # :_3 ::
  #   
  # 
  # @method _enum_cairo_ps_level_
  # @return [Symbol]
  # @scope class
  enum :cairo_ps_level, [
    :_2, 0,
    :_3, 1
  ]
  
  # (Not documented)
  # 
  # @method cairo_ps_surface_create(filename, width_in_points, height_in_points)
  # @param [String] filename 
  # @param [Float] width_in_points 
  # @param [Float] height_in_points 
  # @return [CairoSurface] 
  # @scope class
  attach_function :cairo_ps_surface_create, :cairo_ps_surface_create, [:string, :double, :double], CairoSurface
  
  # (Not documented)
  # 
  # @method cairo_ps_surface_create_for_stream(write_func, closure, width_in_points, height_in_points)
  # @param [Proc(_callback_cairo_write_func_t_)] write_func 
  # @param [FFI::Pointer(*Void)] closure 
  # @param [Float] width_in_points 
  # @param [Float] height_in_points 
  # @return [CairoSurface] 
  # @scope class
  attach_function :cairo_ps_surface_create_for_stream, :cairo_ps_surface_create_for_stream, [:cairo_write_func_t, :pointer, :double, :double], CairoSurface
  
  # (Not documented)
  # 
  # @method cairo_ps_surface_restrict_to_level(surface, level)
  # @param [CairoSurface] surface 
  # @param [Symbol from _enum_cairo_ps_level_] level 
  # @return [nil] 
  # @scope class
  attach_function :cairo_ps_surface_restrict_to_level, :cairo_ps_surface_restrict_to_level, [CairoSurface, :cairo_ps_level], :void
  
  # (Not documented)
  # 
  # @method cairo_ps_get_levels(levels, num_levels)
  # @param [FFI::Pointer(**CairoPsLevelT)] levels 
  # @param [FFI::Pointer(*Int)] num_levels 
  # @return [nil] 
  # @scope class
  attach_function :cairo_ps_get_levels, :cairo_ps_get_levels, [:pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method cairo_ps_level_to_string(level)
  # @param [Symbol from _enum_cairo_ps_level_] level 
  # @return [String] 
  # @scope class
  attach_function :cairo_ps_level_to_string, :cairo_ps_level_to_string, [:cairo_ps_level], :string
  
  # (Not documented)
  # 
  # @method cairo_ps_surface_set_eps(surface, eps)
  # @param [CairoSurface] surface 
  # @param [Integer] eps 
  # @return [nil] 
  # @scope class
  attach_function :cairo_ps_surface_set_eps, :cairo_ps_surface_set_eps, [CairoSurface, :int], :void
  
  # (Not documented)
  # 
  # @method cairo_ps_surface_get_eps(surface)
  # @param [CairoSurface] surface 
  # @return [Integer] 
  # @scope class
  attach_function :cairo_ps_surface_get_eps, :cairo_ps_surface_get_eps, [CairoSurface], :int
  
  # (Not documented)
  # 
  # @method cairo_ps_surface_set_size(surface, width_in_points, height_in_points)
  # @param [CairoSurface] surface 
  # @param [Float] width_in_points 
  # @param [Float] height_in_points 
  # @return [nil] 
  # @scope class
  attach_function :cairo_ps_surface_set_size, :cairo_ps_surface_set_size, [CairoSurface, :double, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_ps_surface_dsc_comment(surface, comment)
  # @param [CairoSurface] surface 
  # @param [String] comment 
  # @return [nil] 
  # @scope class
  attach_function :cairo_ps_surface_dsc_comment, :cairo_ps_surface_dsc_comment, [CairoSurface, :string], :void
  
  # (Not documented)
  # 
  # @method cairo_ps_surface_dsc_begin_setup(surface)
  # @param [CairoSurface] surface 
  # @return [nil] 
  # @scope class
  attach_function :cairo_ps_surface_dsc_begin_setup, :cairo_ps_surface_dsc_begin_setup, [CairoSurface], :void
  
  # (Not documented)
  # 
  # @method cairo_ps_surface_dsc_begin_page_setup(surface)
  # @param [CairoSurface] surface 
  # @return [nil] 
  # @scope class
  attach_function :cairo_ps_surface_dsc_begin_page_setup, :cairo_ps_surface_dsc_begin_page_setup, [CairoSurface], :void
  
  # (Not documented)
  module CairoScriptInterpreterWrappers
    # @param [FFI::Pointer(*CairoScriptInterpreterHooks)] hooks 
    # @return [nil] 
    def install_hooks(hooks)
      Cairo.cairo_script_interpreter_install_hooks(self, hooks)
    end
    
    # @param [String] filename 
    # @return [Symbol from _enum_cairo_status_] 
    def run(filename)
      Cairo.cairo_script_interpreter_run(self, filename)
    end
    
    # @param [FFI::Pointer(*FILE)] stream 
    # @return [Symbol from _enum_cairo_status_] 
    def feed_stream(stream)
      Cairo.cairo_script_interpreter_feed_stream(self, stream)
    end
    
    # @param [String] line 
    # @param [Integer] len 
    # @return [Symbol from _enum_cairo_status_] 
    def feed_string(line, len)
      Cairo.cairo_script_interpreter_feed_string(self, line, len)
    end
    
    # @return [Integer] 
    def get_line_number()
      Cairo.cairo_script_interpreter_get_line_number(self)
    end
    
    # @return [CairoScriptInterpreter] 
    def reference()
      CairoScriptInterpreter.new Cairo.cairo_script_interpreter_reference(self)
    end
    
    # @return [Symbol from _enum_cairo_status_] 
    def finish()
      Cairo.cairo_script_interpreter_finish(self)
    end
    
    # @return [Symbol from _enum_cairo_status_] 
    def destroy()
      Cairo.cairo_script_interpreter_destroy(self)
    end
  end
  
  class CairoScriptInterpreter < FFI::Struct
    include CairoScriptInterpreterWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_csi_destroy_func_t_(closure, ptr)
  # @param [FFI::Pointer(*Void)] closure 
  # @param [FFI::Pointer(*Void)] ptr 
  # @return [FFI::Pointer(*Void)] 
  # @scope class
  callback :csi_destroy_func_t, [:pointer, :pointer], :pointer
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_csi_surface_create_func_t_(cairo_surface_t, closure, content, width, height, uid)
  # @param [CairoSurface] cairo_surface_t 
  # @param [FFI::Pointer(*Void)] closure 
  # @param [Symbol from _enum_cairo_content_] content 
  # @param [Float] width 
  # @param [Float] height 
  # @param [Integer] uid 
  # @return [CairoSurface] 
  # @scope class
  callback :csi_surface_create_func_t, [CairoSurface.by_value, :pointer, :cairo_content, :double, :double, :long], CairoSurface.by_value
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_csi_context_create_func_t_(cairo_t, closure, surface)
  # @param [Cairo] cairo_t 
  # @param [FFI::Pointer(*Void)] closure 
  # @param [CairoSurface] surface 
  # @return [Cairo] 
  # @scope class
  callback :csi_context_create_func_t, [Cairo.by_value, :pointer, CairoSurface], Cairo.by_value
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_csi_show_page_func_t_(closure, cr)
  # @param [FFI::Pointer(*Void)] closure 
  # @param [Cairo] cr 
  # @return [FFI::Pointer(*Void)] 
  # @scope class
  callback :csi_show_page_func_t, [:pointer, Cairo], :pointer
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_csi_copy_page_func_t_(closure, cr)
  # @param [FFI::Pointer(*Void)] closure 
  # @param [Cairo] cr 
  # @return [FFI::Pointer(*Void)] 
  # @scope class
  callback :csi_copy_page_func_t, [:pointer, Cairo], :pointer
  
  # (Not documented)
  # 
  # = Fields:
  # :closure ::
  #   (FFI::Pointer(*Void)) 
  # :surface_create ::
  #   (Proc(_callback_csi_surface_create_func_t_)) 
  # :surface_destroy ::
  #   (Proc(_callback_csi_destroy_func_t_)) 
  # :context_create ::
  #   (Proc(_callback_csi_context_create_func_t_)) 
  # :context_destroy ::
  #   (Proc(_callback_csi_destroy_func_t_)) 
  # :show_page ::
  #   (Proc(_callback_csi_show_page_func_t_)) 
  # :copy_page ::
  #   (Proc(_callback_csi_copy_page_func_t_)) 
  class CairoScriptInterpreterHooks < FFI::Struct
    layout :closure, :pointer,
           :surface_create, :csi_surface_create_func_t,
           :surface_destroy, :csi_destroy_func_t,
           :context_create, :csi_context_create_func_t,
           :context_destroy, :csi_destroy_func_t,
           :show_page, :csi_show_page_func_t,
           :copy_page, :csi_copy_page_func_t
  end
  
  # (Not documented)
  # 
  # @method cairo_script_interpreter_create()
  # @return [CairoScriptInterpreter] 
  # @scope class
  attach_function :cairo_script_interpreter_create, :cairo_script_interpreter_create, [], CairoScriptInterpreter
  
  # (Not documented)
  # 
  # @method cairo_script_interpreter_install_hooks(ctx, hooks)
  # @param [CairoScriptInterpreter] ctx 
  # @param [CairoScriptInterpreterHooks] hooks 
  # @return [nil] 
  # @scope class
  attach_function :cairo_script_interpreter_install_hooks, :cairo_script_interpreter_install_hooks, [CairoScriptInterpreter, CairoScriptInterpreterHooks], :void
  
  # (Not documented)
  # 
  # @method cairo_script_interpreter_run(ctx, filename)
  # @param [CairoScriptInterpreter] ctx 
  # @param [String] filename 
  # @return [Symbol from _enum_cairo_status_] 
  # @scope class
  attach_function :cairo_script_interpreter_run, :cairo_script_interpreter_run, [CairoScriptInterpreter, :string], :cairo_status
  
  # (Not documented)
  # 
  # @method cairo_script_interpreter_feed_stream(ctx, stream)
  # @param [CairoScriptInterpreter] ctx 
  # @param [FFI::Pointer(*FILE)] stream 
  # @return [Symbol from _enum_cairo_status_] 
  # @scope class
  attach_function :cairo_script_interpreter_feed_stream, :cairo_script_interpreter_feed_stream, [CairoScriptInterpreter, :pointer], :cairo_status
  
  # (Not documented)
  # 
  # @method cairo_script_interpreter_feed_string(ctx, line, len)
  # @param [CairoScriptInterpreter] ctx 
  # @param [String] line 
  # @param [Integer] len 
  # @return [Symbol from _enum_cairo_status_] 
  # @scope class
  attach_function :cairo_script_interpreter_feed_string, :cairo_script_interpreter_feed_string, [CairoScriptInterpreter, :string, :int], :cairo_status
  
  # (Not documented)
  # 
  # @method cairo_script_interpreter_get_line_number(ctx)
  # @param [CairoScriptInterpreter] ctx 
  # @return [Integer] 
  # @scope class
  attach_function :cairo_script_interpreter_get_line_number, :cairo_script_interpreter_get_line_number, [CairoScriptInterpreter], :uint
  
  # (Not documented)
  # 
  # @method cairo_script_interpreter_reference(ctx)
  # @param [CairoScriptInterpreter] ctx 
  # @return [CairoScriptInterpreter] 
  # @scope class
  attach_function :cairo_script_interpreter_reference, :cairo_script_interpreter_reference, [CairoScriptInterpreter], CairoScriptInterpreter
  
  # (Not documented)
  # 
  # @method cairo_script_interpreter_finish(ctx)
  # @param [CairoScriptInterpreter] ctx 
  # @return [Symbol from _enum_cairo_status_] 
  # @scope class
  attach_function :cairo_script_interpreter_finish, :cairo_script_interpreter_finish, [CairoScriptInterpreter], :cairo_status
  
  # (Not documented)
  # 
  # @method cairo_script_interpreter_destroy(ctx)
  # @param [CairoScriptInterpreter] ctx 
  # @return [Symbol from _enum_cairo_status_] 
  # @scope class
  attach_function :cairo_script_interpreter_destroy, :cairo_script_interpreter_destroy, [CairoScriptInterpreter], :cairo_status
  
  # (Not documented)
  # 
  # @method cairo_script_interpreter_translate_stream(stream, write_func, closure)
  # @param [FFI::Pointer(*FILE)] stream 
  # @param [Proc(_callback_cairo_write_func_t_)] write_func 
  # @param [FFI::Pointer(*Void)] closure 
  # @return [Symbol from _enum_cairo_status_] 
  # @scope class
  attach_function :cairo_script_interpreter_translate_stream, :cairo_script_interpreter_translate_stream, [:pointer, :cairo_write_func_t, :pointer], :cairo_status
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_svg_version).</em>
  # 
  # === Options:
  # :_1_1 ::
  #   
  # :_1_2 ::
  #   
  # 
  # @method _enum_cairo_svg_version_
  # @return [Symbol]
  # @scope class
  enum :cairo_svg_version, [
    :_1_1, 0,
    :_1_2, 1
  ]
  
  # (Not documented)
  # 
  # @method cairo_svg_surface_create(filename, width_in_points, height_in_points)
  # @param [String] filename 
  # @param [Float] width_in_points 
  # @param [Float] height_in_points 
  # @return [CairoSurface] 
  # @scope class
  attach_function :cairo_svg_surface_create, :cairo_svg_surface_create, [:string, :double, :double], CairoSurface
  
  # (Not documented)
  # 
  # @method cairo_svg_surface_create_for_stream(write_func, closure, width_in_points, height_in_points)
  # @param [Proc(_callback_cairo_write_func_t_)] write_func 
  # @param [FFI::Pointer(*Void)] closure 
  # @param [Float] width_in_points 
  # @param [Float] height_in_points 
  # @return [CairoSurface] 
  # @scope class
  attach_function :cairo_svg_surface_create_for_stream, :cairo_svg_surface_create_for_stream, [:cairo_write_func_t, :pointer, :double, :double], CairoSurface
  
  # (Not documented)
  # 
  # @method cairo_svg_surface_restrict_to_version(surface, version)
  # @param [CairoSurface] surface 
  # @param [Symbol from _enum_cairo_svg_version_] version 
  # @return [nil] 
  # @scope class
  attach_function :cairo_svg_surface_restrict_to_version, :cairo_svg_surface_restrict_to_version, [CairoSurface, :cairo_svg_version], :void
  
  # (Not documented)
  # 
  # @method cairo_svg_get_versions(versions, num_versions)
  # @param [FFI::Pointer(**CairoSvgVersionT)] versions 
  # @param [FFI::Pointer(*Int)] num_versions 
  # @return [nil] 
  # @scope class
  attach_function :cairo_svg_get_versions, :cairo_svg_get_versions, [:pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method cairo_svg_version_to_string(version)
  # @param [Symbol from _enum_cairo_svg_version_] version 
  # @return [String] 
  # @scope class
  attach_function :cairo_svg_version_to_string, :cairo_svg_version_to_string, [:cairo_svg_version], :string
  
  # (Not documented)
  # 
  # @method cairo_win32_surface_create(hdc)
  # @param [FFI::Pointer(HDC)] hdc 
  # @return [CairoSurface] 
  # @scope class
  attach_function :cairo_win32_surface_create, :cairo_win32_surface_create, [:pointer], CairoSurface
  
  # (Not documented)
  # 
  # @method cairo_win32_printing_surface_create(hdc)
  # @param [FFI::Pointer(HDC)] hdc 
  # @return [CairoSurface] 
  # @scope class
  attach_function :cairo_win32_printing_surface_create, :cairo_win32_printing_surface_create, [:pointer], CairoSurface
  
  # (Not documented)
  # 
  # @method cairo_win32_surface_create_with_ddb(hdc, format, width, height)
  # @param [FFI::Pointer(HDC)] hdc 
  # @param [Symbol from _enum_cairo_format_] format 
  # @param [Integer] width 
  # @param [Integer] height 
  # @return [CairoSurface] 
  # @scope class
  attach_function :cairo_win32_surface_create_with_ddb, :cairo_win32_surface_create_with_ddb, [:pointer, :cairo_format, :int, :int], CairoSurface
  
  # (Not documented)
  # 
  # @method cairo_win32_surface_create_with_dib(format, width, height)
  # @param [Symbol from _enum_cairo_format_] format 
  # @param [Integer] width 
  # @param [Integer] height 
  # @return [CairoSurface] 
  # @scope class
  attach_function :cairo_win32_surface_create_with_dib, :cairo_win32_surface_create_with_dib, [:cairo_format, :int, :int], CairoSurface
  
  # (Not documented)
  # 
  # @method cairo_win32_surface_get_dc(surface)
  # @param [CairoSurface] surface 
  # @return [FFI::Pointer(HDC)] 
  # @scope class
  attach_function :cairo_win32_surface_get_dc, :cairo_win32_surface_get_dc, [CairoSurface], :pointer
  
  # (Not documented)
  # 
  # @method cairo_win32_surface_get_image(surface)
  # @param [CairoSurface] surface 
  # @return [CairoSurface] 
  # @scope class
  attach_function :cairo_win32_surface_get_image, :cairo_win32_surface_get_image, [CairoSurface], CairoSurface
  
  # Win32 font support
  # 
  # @method cairo_win32_font_face_create_for_logfontw(logfont)
  # @param [FFI::Pointer(*LOGFONTW)] logfont 
  # @return [CairoFontFace] 
  # @scope class
  attach_function :cairo_win32_font_face_create_for_logfontw, :cairo_win32_font_face_create_for_logfontw, [:pointer], CairoFontFace
  
  # (Not documented)
  # 
  # @method cairo_win32_font_face_create_for_hfont(font)
  # @param [FFI::Pointer(HFONT)] font 
  # @return [CairoFontFace] 
  # @scope class
  attach_function :cairo_win32_font_face_create_for_hfont, :cairo_win32_font_face_create_for_hfont, [:pointer], CairoFontFace
  
  # (Not documented)
  # 
  # @method cairo_win32_font_face_create_for_logfontw_hfont(logfont, font)
  # @param [FFI::Pointer(*LOGFONTW)] logfont 
  # @param [FFI::Pointer(HFONT)] font 
  # @return [CairoFontFace] 
  # @scope class
  attach_function :cairo_win32_font_face_create_for_logfontw_hfont, :cairo_win32_font_face_create_for_logfontw_hfont, [:pointer, :pointer], CairoFontFace
  
  # (Not documented)
  # 
  # @method cairo_win32_scaled_font_select_font(scaled_font, hdc)
  # @param [CairoScaledFont] scaled_font 
  # @param [FFI::Pointer(HDC)] hdc 
  # @return [Symbol from _enum_cairo_status_] 
  # @scope class
  attach_function :cairo_win32_scaled_font_select_font, :cairo_win32_scaled_font_select_font, [CairoScaledFont, :pointer], :cairo_status
  
  # (Not documented)
  # 
  # @method cairo_win32_scaled_font_done_font(scaled_font)
  # @param [CairoScaledFont] scaled_font 
  # @return [nil] 
  # @scope class
  attach_function :cairo_win32_scaled_font_done_font, :cairo_win32_scaled_font_done_font, [CairoScaledFont], :void
  
  # (Not documented)
  # 
  # @method cairo_win32_scaled_font_get_metrics_factor(scaled_font)
  # @param [CairoScaledFont] scaled_font 
  # @return [Float] 
  # @scope class
  attach_function :cairo_win32_scaled_font_get_metrics_factor, :cairo_win32_scaled_font_get_metrics_factor, [CairoScaledFont], :double
  
  # (Not documented)
  # 
  # @method cairo_win32_scaled_font_get_logical_to_device(scaled_font, logical_to_device)
  # @param [CairoScaledFont] scaled_font 
  # @param [CairoMatrix] logical_to_device 
  # @return [nil] 
  # @scope class
  attach_function :cairo_win32_scaled_font_get_logical_to_device, :cairo_win32_scaled_font_get_logical_to_device, [CairoScaledFont, CairoMatrix], :void
  
  # (Not documented)
  # 
  # @method cairo_win32_scaled_font_get_device_to_logical(scaled_font, device_to_logical)
  # @param [CairoScaledFont] scaled_font 
  # @param [CairoMatrix] device_to_logical 
  # @return [nil] 
  # @scope class
  attach_function :cairo_win32_scaled_font_get_device_to_logical, :cairo_win32_scaled_font_get_device_to_logical, [CairoScaledFont, CairoMatrix], :void
  
end
